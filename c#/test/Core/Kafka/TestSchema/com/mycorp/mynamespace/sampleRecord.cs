// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen, version 1.10.0.0
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace com.mycorp.mynamespace
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using Avro;
	using Avro.Specific;
	
	/// <summary>
	/// Sample schema to help you get started.
	/// </summary>
	public partial class sampleRecord : ISpecificRecord
	{
		public static Schema _SCHEMA = Avro.Schema.Parse(@"{""doc"": ""Sample schema to help you get started."",""type"":""record"",""name"":""sampleRecord"",""namespace"":""com.mycorp.mynamespace"",""fields"":[{""name"":""my_field1"",""doc"":""The int type is a 32-bit signed integer."",""type"":""int""},{""name"":""my_field2"",""doc"":""The double type is a double precision (64-bit) IEEE 754 floating-point number."",""type"":""double""},{""name"":""my_field3"",""doc"":""The string is a unicode character sequence."",""type"":""string""}]}");
		/// <summary>
		/// The int type is a 32-bit signed integer.
		/// </summary>
		private int _my_field1;
		/// <summary>
		/// The double type is a double precision (64-bit) IEEE 754 floating-point number.
		/// </summary>
		private double _my_field2;
		/// <summary>
		/// The string is a unicode character sequence.
		/// </summary>
		private string _my_field3;
		public virtual Schema Schema
		{
			get
			{
				return sampleRecord._SCHEMA;
			}
		}
		/// <summary>
		/// The int type is a 32-bit signed integer.
		/// </summary>
		public int my_field1
		{
			get
			{
				return this._my_field1;
			}
			set
			{
				this._my_field1 = value;
			}
		}
		/// <summary>
		/// The double type is a double precision (64-bit) IEEE 754 floating-point number.
		/// </summary>
		public double my_field2
		{
			get
			{
				return this._my_field2;
			}
			set
			{
				this._my_field2 = value;
			}
		}
		/// <summary>
		/// The string is a unicode character sequence.
		/// </summary>
		public string my_field3
		{
			get
			{
				return this._my_field3;
			}
			set
			{
				this._my_field3 = value;
			}
		}
		public virtual object Get(int fieldPos)
		{
			switch (fieldPos)
			{
			case 0: return this.my_field1;
			case 1: return this.my_field2;
			case 2: return this.my_field3;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Get()");
			};
		}
		public virtual void Put(int fieldPos, object fieldValue)
		{
			switch (fieldPos)
			{
			case 0: this.my_field1 = (System.Int32)fieldValue; break;
			case 1: this.my_field2 = (System.Double)fieldValue; break;
			case 2: this.my_field3 = (System.String)fieldValue; break;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Put()");
			};
		}
	}
}
