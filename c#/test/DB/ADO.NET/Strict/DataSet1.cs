//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Strict {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DataSet1 : DataSet {
        
        private CITYDataTable tableCITY;
        
        private TERRITORYDataTable tableTERRITORY;
        
        private DataRelation relationTERRITORY_CITY_CITY_NAME_ID;
        
        private DataRelation relationTERRITORY_CITY_COUNTRY_ID;
        
        public DataSet1() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DataSet1(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["CITY"] != null)) {
                    this.Tables.Add(new CITYDataTable(ds.Tables["CITY"]));
                }
                if ((ds.Tables["TERRITORY"] != null)) {
                    this.Tables.Add(new TERRITORYDataTable(ds.Tables["TERRITORY"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CITYDataTable CITY {
            get {
                return this.tableCITY;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TERRITORYDataTable TERRITORY {
            get {
                return this.tableTERRITORY;
            }
        }
        
        public override DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["CITY"] != null)) {
                this.Tables.Add(new CITYDataTable(ds.Tables["CITY"]));
            }
            if ((ds.Tables["TERRITORY"] != null)) {
                this.Tables.Add(new TERRITORYDataTable(ds.Tables["TERRITORY"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableCITY = ((CITYDataTable)(this.Tables["CITY"]));
            if ((this.tableCITY != null)) {
                this.tableCITY.InitVars();
            }
            this.tableTERRITORY = ((TERRITORYDataTable)(this.Tables["TERRITORY"]));
            if ((this.tableTERRITORY != null)) {
                this.tableTERRITORY.InitVars();
            }
            this.relationTERRITORY_CITY_CITY_NAME_ID = this.Relations["TERRITORY_CITY_CITY_NAME_ID"];
            this.relationTERRITORY_CITY_COUNTRY_ID = this.Relations["TERRITORY_CITY_COUNTRY_ID"];
        }
        
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DataSet1.xsd";
            this.Locale = new System.Globalization.CultureInfo("ru-RU");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableCITY = new CITYDataTable();
            this.Tables.Add(this.tableCITY);
            this.tableTERRITORY = new TERRITORYDataTable();
            this.Tables.Add(this.tableTERRITORY);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("TERRITORY_CITY_CITY_NAME_ID", new DataColumn[] {
                        this.tableTERRITORY.TERRITORY_IDColumn}, new DataColumn[] {
                        this.tableCITY.CITY_NAME_IDColumn});
            this.tableCITY.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.Cascade;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("TERRITORY_CITY_COUNTRY_ID", new DataColumn[] {
                        this.tableTERRITORY.TERRITORY_IDColumn}, new DataColumn[] {
                        this.tableCITY.COUNTRY_IDColumn});
            this.tableCITY.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.Cascade;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationTERRITORY_CITY_CITY_NAME_ID = new DataRelation("TERRITORY_CITY_CITY_NAME_ID", new DataColumn[] {
                        this.tableTERRITORY.TERRITORY_IDColumn}, new DataColumn[] {
                        this.tableCITY.CITY_NAME_IDColumn}, false);
            this.Relations.Add(this.relationTERRITORY_CITY_CITY_NAME_ID);
            this.relationTERRITORY_CITY_COUNTRY_ID = new DataRelation("TERRITORY_CITY_COUNTRY_ID", new DataColumn[] {
                        this.tableTERRITORY.TERRITORY_IDColumn}, new DataColumn[] {
                        this.tableCITY.COUNTRY_IDColumn}, false);
            this.Relations.Add(this.relationTERRITORY_CITY_COUNTRY_ID);
        }
        
        private bool ShouldSerializeCITY() {
            return false;
        }
        
        private bool ShouldSerializeTERRITORY() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void CITYRowChangeEventHandler(object sender, CITYRowChangeEvent e);
        
        public delegate void TERRITORYRowChangeEventHandler(object sender, TERRITORYRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CITYDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCITY_ID;
            
            private DataColumn columnCITY_NAME_ID;
            
            private DataColumn columnCOUNTRY_ID;
            
            private DataColumn columnAREA_ID;
            
            private DataColumn columnREGION_ID;
            
            private DataColumn columnPHONE_COD;
            
            private DataColumn columnCITY_TYPE_ID;
            
            private DataColumn columnRECORD_STATE;
            
            private DataColumn columnUSER_ID;
            
            private DataColumn columnRECORD_MODIFY;
            
            internal CITYDataTable() : 
                    base("CITY") {
                this.InitClass();
            }
            
            internal CITYDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CITY_IDColumn {
                get {
                    return this.columnCITY_ID;
                }
            }
            
            internal DataColumn CITY_NAME_IDColumn {
                get {
                    return this.columnCITY_NAME_ID;
                }
            }
            
            internal DataColumn COUNTRY_IDColumn {
                get {
                    return this.columnCOUNTRY_ID;
                }
            }
            
            internal DataColumn AREA_IDColumn {
                get {
                    return this.columnAREA_ID;
                }
            }
            
            internal DataColumn REGION_IDColumn {
                get {
                    return this.columnREGION_ID;
                }
            }
            
            internal DataColumn PHONE_CODColumn {
                get {
                    return this.columnPHONE_COD;
                }
            }
            
            internal DataColumn CITY_TYPE_IDColumn {
                get {
                    return this.columnCITY_TYPE_ID;
                }
            }
            
            internal DataColumn RECORD_STATEColumn {
                get {
                    return this.columnRECORD_STATE;
                }
            }
            
            internal DataColumn USER_IDColumn {
                get {
                    return this.columnUSER_ID;
                }
            }
            
            internal DataColumn RECORD_MODIFYColumn {
                get {
                    return this.columnRECORD_MODIFY;
                }
            }
            
            public CITYRow this[int index] {
                get {
                    return ((CITYRow)(this.Rows[index]));
                }
            }
            
            public event CITYRowChangeEventHandler CITYRowChanged;
            
            public event CITYRowChangeEventHandler CITYRowChanging;
            
            public event CITYRowChangeEventHandler CITYRowDeleted;
            
            public event CITYRowChangeEventHandler CITYRowDeleting;
            
            public void AddCITYRow(CITYRow row) {
                this.Rows.Add(row);
            }
            
            public CITYRow AddCITYRow(System.Decimal CITY_ID, TERRITORYRow parentTERRITORYRowByTERRITORY_CITY_CITY_NAME_ID, TERRITORYRow parentTERRITORYRowByTERRITORY_CITY_COUNTRY_ID, System.Decimal AREA_ID, System.Decimal REGION_ID, string PHONE_COD, short CITY_TYPE_ID, System.Byte RECORD_STATE, System.Decimal USER_ID, System.DateTime RECORD_MODIFY) {
                CITYRow rowCITYRow = ((CITYRow)(this.NewRow()));
                rowCITYRow.ItemArray = new object[] {
                        CITY_ID,
                        parentTERRITORYRowByTERRITORY_CITY_CITY_NAME_ID[0],
                        parentTERRITORYRowByTERRITORY_CITY_COUNTRY_ID[0],
                        AREA_ID,
                        REGION_ID,
                        PHONE_COD,
                        CITY_TYPE_ID,
                        RECORD_STATE,
                        USER_ID,
                        RECORD_MODIFY};
                this.Rows.Add(rowCITYRow);
                return rowCITYRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CITYDataTable cln = ((CITYDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CITYDataTable();
            }
            
            internal void InitVars() {
                this.columnCITY_ID = this.Columns["CITY_ID"];
                this.columnCITY_NAME_ID = this.Columns["CITY_NAME_ID"];
                this.columnCOUNTRY_ID = this.Columns["COUNTRY_ID"];
                this.columnAREA_ID = this.Columns["AREA_ID"];
                this.columnREGION_ID = this.Columns["REGION_ID"];
                this.columnPHONE_COD = this.Columns["PHONE_COD"];
                this.columnCITY_TYPE_ID = this.Columns["CITY_TYPE_ID"];
                this.columnRECORD_STATE = this.Columns["RECORD_STATE"];
                this.columnUSER_ID = this.Columns["USER_ID"];
                this.columnRECORD_MODIFY = this.Columns["RECORD_MODIFY"];
            }
            
            private void InitClass() {
                this.columnCITY_ID = new DataColumn("CITY_ID", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCITY_ID);
                this.columnCITY_NAME_ID = new DataColumn("CITY_NAME_ID", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCITY_NAME_ID);
                this.columnCOUNTRY_ID = new DataColumn("COUNTRY_ID", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCOUNTRY_ID);
                this.columnAREA_ID = new DataColumn("AREA_ID", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAREA_ID);
                this.columnREGION_ID = new DataColumn("REGION_ID", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnREGION_ID);
                this.columnPHONE_COD = new DataColumn("PHONE_COD", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPHONE_COD);
                this.columnCITY_TYPE_ID = new DataColumn("CITY_TYPE_ID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCITY_TYPE_ID);
                this.columnRECORD_STATE = new DataColumn("RECORD_STATE", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRECORD_STATE);
                this.columnUSER_ID = new DataColumn("USER_ID", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUSER_ID);
                this.columnRECORD_MODIFY = new DataColumn("RECORD_MODIFY", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRECORD_MODIFY);
                this.columnCITY_ID.AllowDBNull = false;
                this.columnCITY_NAME_ID.AllowDBNull = false;
            }
            
            public CITYRow NewCITYRow() {
                return ((CITYRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CITYRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CITYRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CITYRowChanged != null)) {
                    this.CITYRowChanged(this, new CITYRowChangeEvent(((CITYRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CITYRowChanging != null)) {
                    this.CITYRowChanging(this, new CITYRowChangeEvent(((CITYRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CITYRowDeleted != null)) {
                    this.CITYRowDeleted(this, new CITYRowChangeEvent(((CITYRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CITYRowDeleting != null)) {
                    this.CITYRowDeleting(this, new CITYRowChangeEvent(((CITYRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCITYRow(CITYRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CITYRow : DataRow {
            
            private CITYDataTable tableCITY;
            
            internal CITYRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCITY = ((CITYDataTable)(this.Table));
            }
            
            public System.Decimal CITY_ID {
                get {
                    return ((System.Decimal)(this[this.tableCITY.CITY_IDColumn]));
                }
                set {
                    this[this.tableCITY.CITY_IDColumn] = value;
                }
            }
            
            public System.Decimal CITY_NAME_ID {
                get {
                    return ((System.Decimal)(this[this.tableCITY.CITY_NAME_IDColumn]));
                }
                set {
                    this[this.tableCITY.CITY_NAME_IDColumn] = value;
                }
            }
            
            public System.Decimal COUNTRY_ID {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableCITY.COUNTRY_IDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCITY.COUNTRY_IDColumn] = value;
                }
            }
            
            public System.Decimal AREA_ID {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableCITY.AREA_IDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCITY.AREA_IDColumn] = value;
                }
            }
            
            public System.Decimal REGION_ID {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableCITY.REGION_IDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCITY.REGION_IDColumn] = value;
                }
            }
            
            public string PHONE_COD {
                get {
                    try {
                        return ((string)(this[this.tableCITY.PHONE_CODColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCITY.PHONE_CODColumn] = value;
                }
            }
            
            public short CITY_TYPE_ID {
                get {
                    try {
                        return ((short)(this[this.tableCITY.CITY_TYPE_IDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCITY.CITY_TYPE_IDColumn] = value;
                }
            }
            
            public System.Byte RECORD_STATE {
                get {
                    try {
                        return ((System.Byte)(this[this.tableCITY.RECORD_STATEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCITY.RECORD_STATEColumn] = value;
                }
            }
            
            public System.Decimal USER_ID {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableCITY.USER_IDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCITY.USER_IDColumn] = value;
                }
            }
            
            public System.DateTime RECORD_MODIFY {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableCITY.RECORD_MODIFYColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCITY.RECORD_MODIFYColumn] = value;
                }
            }
            
            public TERRITORYRow TERRITORYRowByTERRITORY_CITY_CITY_NAME_ID {
                get {
                    return ((TERRITORYRow)(this.GetParentRow(this.Table.ParentRelations["TERRITORY_CITY_CITY_NAME_ID"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TERRITORY_CITY_CITY_NAME_ID"]);
                }
            }
            
            public TERRITORYRow TERRITORYRowByTERRITORY_CITY_COUNTRY_ID {
                get {
                    return ((TERRITORYRow)(this.GetParentRow(this.Table.ParentRelations["TERRITORY_CITY_COUNTRY_ID"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TERRITORY_CITY_COUNTRY_ID"]);
                }
            }
            
            public bool IsCOUNTRY_IDNull() {
                return this.IsNull(this.tableCITY.COUNTRY_IDColumn);
            }
            
            public void SetCOUNTRY_IDNull() {
                this[this.tableCITY.COUNTRY_IDColumn] = System.Convert.DBNull;
            }
            
            public bool IsAREA_IDNull() {
                return this.IsNull(this.tableCITY.AREA_IDColumn);
            }
            
            public void SetAREA_IDNull() {
                this[this.tableCITY.AREA_IDColumn] = System.Convert.DBNull;
            }
            
            public bool IsREGION_IDNull() {
                return this.IsNull(this.tableCITY.REGION_IDColumn);
            }
            
            public void SetREGION_IDNull() {
                this[this.tableCITY.REGION_IDColumn] = System.Convert.DBNull;
            }
            
            public bool IsPHONE_CODNull() {
                return this.IsNull(this.tableCITY.PHONE_CODColumn);
            }
            
            public void SetPHONE_CODNull() {
                this[this.tableCITY.PHONE_CODColumn] = System.Convert.DBNull;
            }
            
            public bool IsCITY_TYPE_IDNull() {
                return this.IsNull(this.tableCITY.CITY_TYPE_IDColumn);
            }
            
            public void SetCITY_TYPE_IDNull() {
                this[this.tableCITY.CITY_TYPE_IDColumn] = System.Convert.DBNull;
            }
            
            public bool IsRECORD_STATENull() {
                return this.IsNull(this.tableCITY.RECORD_STATEColumn);
            }
            
            public void SetRECORD_STATENull() {
                this[this.tableCITY.RECORD_STATEColumn] = System.Convert.DBNull;
            }
            
            public bool IsUSER_IDNull() {
                return this.IsNull(this.tableCITY.USER_IDColumn);
            }
            
            public void SetUSER_IDNull() {
                this[this.tableCITY.USER_IDColumn] = System.Convert.DBNull;
            }
            
            public bool IsRECORD_MODIFYNull() {
                return this.IsNull(this.tableCITY.RECORD_MODIFYColumn);
            }
            
            public void SetRECORD_MODIFYNull() {
                this[this.tableCITY.RECORD_MODIFYColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CITYRowChangeEvent : EventArgs {
            
            private CITYRow eventRow;
            
            private DataRowAction eventAction;
            
            public CITYRowChangeEvent(CITYRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CITYRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TERRITORYDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnTERRITORY_ID;
            
            private DataColumn columnTERRITORY_NAME;
            
            private DataColumn columnTERRITORY_PARAM_ID;
            
            private DataColumn columnRECORD_STATE;
            
            private DataColumn columnUSER_ID;
            
            private DataColumn columnRECORD_MODIFY;
            
            internal TERRITORYDataTable() : 
                    base("TERRITORY") {
                this.InitClass();
            }
            
            internal TERRITORYDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TERRITORY_IDColumn {
                get {
                    return this.columnTERRITORY_ID;
                }
            }
            
            internal DataColumn TERRITORY_NAMEColumn {
                get {
                    return this.columnTERRITORY_NAME;
                }
            }
            
            internal DataColumn TERRITORY_PARAM_IDColumn {
                get {
                    return this.columnTERRITORY_PARAM_ID;
                }
            }
            
            internal DataColumn RECORD_STATEColumn {
                get {
                    return this.columnRECORD_STATE;
                }
            }
            
            internal DataColumn USER_IDColumn {
                get {
                    return this.columnUSER_ID;
                }
            }
            
            internal DataColumn RECORD_MODIFYColumn {
                get {
                    return this.columnRECORD_MODIFY;
                }
            }
            
            public TERRITORYRow this[int index] {
                get {
                    return ((TERRITORYRow)(this.Rows[index]));
                }
            }
            
            public event TERRITORYRowChangeEventHandler TERRITORYRowChanged;
            
            public event TERRITORYRowChangeEventHandler TERRITORYRowChanging;
            
            public event TERRITORYRowChangeEventHandler TERRITORYRowDeleted;
            
            public event TERRITORYRowChangeEventHandler TERRITORYRowDeleting;
            
            public void AddTERRITORYRow(TERRITORYRow row) {
                this.Rows.Add(row);
            }
            
            public TERRITORYRow AddTERRITORYRow(System.Decimal TERRITORY_ID, string TERRITORY_NAME, short TERRITORY_PARAM_ID, System.Byte RECORD_STATE, System.Decimal USER_ID, System.DateTime RECORD_MODIFY) {
                TERRITORYRow rowTERRITORYRow = ((TERRITORYRow)(this.NewRow()));
                rowTERRITORYRow.ItemArray = new object[] {
                        TERRITORY_ID,
                        TERRITORY_NAME,
                        TERRITORY_PARAM_ID,
                        RECORD_STATE,
                        USER_ID,
                        RECORD_MODIFY};
                this.Rows.Add(rowTERRITORYRow);
                return rowTERRITORYRow;
            }
            
            public TERRITORYRow FindByTERRITORY_ID(System.Decimal TERRITORY_ID) {
                return ((TERRITORYRow)(this.Rows.Find(new object[] {
                            TERRITORY_ID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TERRITORYDataTable cln = ((TERRITORYDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TERRITORYDataTable();
            }
            
            internal void InitVars() {
                this.columnTERRITORY_ID = this.Columns["TERRITORY_ID"];
                this.columnTERRITORY_NAME = this.Columns["TERRITORY_NAME"];
                this.columnTERRITORY_PARAM_ID = this.Columns["TERRITORY_PARAM_ID"];
                this.columnRECORD_STATE = this.Columns["RECORD_STATE"];
                this.columnUSER_ID = this.Columns["USER_ID"];
                this.columnRECORD_MODIFY = this.Columns["RECORD_MODIFY"];
            }
            
            private void InitClass() {
                this.columnTERRITORY_ID = new DataColumn("TERRITORY_ID", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTERRITORY_ID);
                this.columnTERRITORY_NAME = new DataColumn("TERRITORY_NAME", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTERRITORY_NAME);
                this.columnTERRITORY_PARAM_ID = new DataColumn("TERRITORY_PARAM_ID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTERRITORY_PARAM_ID);
                this.columnRECORD_STATE = new DataColumn("RECORD_STATE", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRECORD_STATE);
                this.columnUSER_ID = new DataColumn("USER_ID", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUSER_ID);
                this.columnRECORD_MODIFY = new DataColumn("RECORD_MODIFY", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRECORD_MODIFY);
                this.Constraints.Add(new UniqueConstraint("DataSet1Key1", new DataColumn[] {
                                this.columnTERRITORY_ID}, true));
                this.columnTERRITORY_ID.AllowDBNull = false;
                this.columnTERRITORY_ID.Unique = true;
                this.columnTERRITORY_NAME.AllowDBNull = false;
                this.columnTERRITORY_PARAM_ID.AllowDBNull = false;
            }
            
            public TERRITORYRow NewTERRITORYRow() {
                return ((TERRITORYRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TERRITORYRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TERRITORYRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TERRITORYRowChanged != null)) {
                    this.TERRITORYRowChanged(this, new TERRITORYRowChangeEvent(((TERRITORYRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TERRITORYRowChanging != null)) {
                    this.TERRITORYRowChanging(this, new TERRITORYRowChangeEvent(((TERRITORYRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TERRITORYRowDeleted != null)) {
                    this.TERRITORYRowDeleted(this, new TERRITORYRowChangeEvent(((TERRITORYRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TERRITORYRowDeleting != null)) {
                    this.TERRITORYRowDeleting(this, new TERRITORYRowChangeEvent(((TERRITORYRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTERRITORYRow(TERRITORYRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TERRITORYRow : DataRow {
            
            private TERRITORYDataTable tableTERRITORY;
            
            internal TERRITORYRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTERRITORY = ((TERRITORYDataTable)(this.Table));
            }
            
            public System.Decimal TERRITORY_ID {
                get {
                    return ((System.Decimal)(this[this.tableTERRITORY.TERRITORY_IDColumn]));
                }
                set {
                    this[this.tableTERRITORY.TERRITORY_IDColumn] = value;
                }
            }
            
            public string TERRITORY_NAME {
                get {
                    return ((string)(this[this.tableTERRITORY.TERRITORY_NAMEColumn]));
                }
                set {
                    this[this.tableTERRITORY.TERRITORY_NAMEColumn] = value;
                }
            }
            
            public short TERRITORY_PARAM_ID {
                get {
                    return ((short)(this[this.tableTERRITORY.TERRITORY_PARAM_IDColumn]));
                }
                set {
                    this[this.tableTERRITORY.TERRITORY_PARAM_IDColumn] = value;
                }
            }
            
            public System.Byte RECORD_STATE {
                get {
                    try {
                        return ((System.Byte)(this[this.tableTERRITORY.RECORD_STATEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTERRITORY.RECORD_STATEColumn] = value;
                }
            }
            
            public System.Decimal USER_ID {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableTERRITORY.USER_IDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTERRITORY.USER_IDColumn] = value;
                }
            }
            
            public System.DateTime RECORD_MODIFY {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableTERRITORY.RECORD_MODIFYColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTERRITORY.RECORD_MODIFYColumn] = value;
                }
            }
            
            public bool IsRECORD_STATENull() {
                return this.IsNull(this.tableTERRITORY.RECORD_STATEColumn);
            }
            
            public void SetRECORD_STATENull() {
                this[this.tableTERRITORY.RECORD_STATEColumn] = System.Convert.DBNull;
            }
            
            public bool IsUSER_IDNull() {
                return this.IsNull(this.tableTERRITORY.USER_IDColumn);
            }
            
            public void SetUSER_IDNull() {
                this[this.tableTERRITORY.USER_IDColumn] = System.Convert.DBNull;
            }
            
            public bool IsRECORD_MODIFYNull() {
                return this.IsNull(this.tableTERRITORY.RECORD_MODIFYColumn);
            }
            
            public void SetRECORD_MODIFYNull() {
                this[this.tableTERRITORY.RECORD_MODIFYColumn] = System.Convert.DBNull;
            }
            
            public CITYRow[] GetCITYRowsByTERRITORY_CITY_CITY_NAME_ID() {
                return ((CITYRow[])(this.GetChildRows(this.Table.ChildRelations["TERRITORY_CITY_CITY_NAME_ID"])));
            }
            
            public CITYRow[] GetCITYRowsByTERRITORY_CITY_COUNTRY_ID() {
                return ((CITYRow[])(this.GetChildRows(this.Table.ChildRelations["TERRITORY_CITY_COUNTRY_ID"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TERRITORYRowChangeEvent : EventArgs {
            
            private TERRITORYRow eventRow;
            
            private DataRowAction eventAction;
            
            public TERRITORYRowChangeEvent(TERRITORYRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TERRITORYRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
