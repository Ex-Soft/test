/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.nordstrom.care.communications;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Information that describes a resend order correspondence event. */
@org.apache.avro.specific.AvroGenerated
public class EmailCommunicationRequested extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 294594592447864777L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EmailCommunicationRequested\",\"namespace\":\"com.nordstrom.care.communications\",\"doc\":\"Information that describes a resend order correspondence event.\",\"fields\":[{\"name\":\"source\",\"type\":{\"type\":\"record\",\"name\":\"Source\",\"namespace\":\"com.nordstrom.event.rosettastone\",\"doc\":\"Note: There is a new version specific to customer data plane. See `standardized/Channel.avdl`.\\r\\n\\r\\n    Information about the domain that produced the event.\\r\\n    A domain is a self-contained application ecosystem that supports a foundational business function.\",\"fields\":[{\"name\":\"channelCountry\",\"type\":{\"type\":\"enum\",\"name\":\"CountryCode\",\"namespace\":\"com.nordstrom.event.common\",\"doc\":\"Country Codes represented in [ISO 3166-2 alpha-2 format](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\\r\\n\\r\\n    Note: Producers must map Transitionally Reserved codes in the above standards to their respective officially assigned codes.\\r\\n\\r\\n  * AD : Andorra\\r\\n  * AE : United Arab Emirates\\r\\n  * AF : Afghanistan\\r\\n  * AG : Antigua and Barbuda\\r\\n  * AI : Anguilla\\r\\n  * AL : Albania\\r\\n  * AM : Armenia\\r\\n  * AO : Angola\\r\\n  * AQ : Antarctica\\r\\n  * AR : Argentina\\r\\n  * AS : American Samoa\\r\\n  * AT : Austria\\r\\n  * AU : Australia\\r\\n  * AW : Aruba\\r\\n  * AX : Aland Islands\\r\\n  * AZ : Azerbaijan\\r\\n  * BA : Bosnia and Herzegovina\\r\\n  * BB : Barbados\\r\\n  * BD : Bangladesh\\r\\n  * BE : Belgium\\r\\n  * BF : Burkina Faso\\r\\n  * BG : Bulgaria\\r\\n  * BH : Bahrain\\r\\n  * BI : Burundi\\r\\n  * BJ : Benin\\r\\n  * BL : Saint Barthelemy\\r\\n  * BM : Bermuda\\r\\n  * BN : Brunei Darussalam\\r\\n  * BO : Bolivia (Plurinational State of)\\r\\n  * BQ : Bonaire, Sint Eustatius and Saba\\r\\n  * BR : Brazil\\r\\n  * BS : Bahamas\\r\\n  * BT : Bhutan\\r\\n  * BV : Bouvet Island\\r\\n  * BW : Botswana\\r\\n  * BY : Belarus\\r\\n  * BZ : Belize\\r\\n  * CA : Canada\\r\\n  * CC : Cocos (Keeling) Islands\\r\\n  * CD : Congo, Democratic Republic of the\\r\\n  * CF : Central African Republic\\r\\n  * CG : Congo\\r\\n  * CH : Switzerland\\r\\n  * CI : Cote d'Ivoire\\r\\n  * CK : Cook Islands\\r\\n  * CL : Chile\\r\\n  * CM : Cameroon\\r\\n  * CN : China\\r\\n  * CO : Colombia\\r\\n  * CR : Costa Rica\\r\\n  * CU : Cuba\\r\\n  * CV : Cabo Verde\\r\\n  * CW : Curacao\\r\\n  * CX : Christmas Island\\r\\n  * CY : Cyprus\\r\\n  * CZ : Czechia\\r\\n  * DE : Germany\\r\\n  * DJ : Djibouti\\r\\n  * DK : Denmark\\r\\n  * DM : Dominica\\r\\n  * DO : Dominican Republic\\r\\n  * DZ : Algeria\\r\\n  * EC : Ecuador\\r\\n  * EE : Estonia\\r\\n  * EG : Egypt\\r\\n  * EH : Western Sahara\\r\\n  * ER : Eritrea\\r\\n  * ES : Spain\\r\\n  * ET : Ethiopia\\r\\n  * FI : Finland\\r\\n  * FJ : Fiji\\r\\n  * FK : Falkland Islands (Malvinas)\\r\\n  * FM : Micronesia (Federated States of)\\r\\n  * FO : Faroe Islands\\r\\n  * FR : France\\r\\n  * GA : Gabon\\r\\n  * GB : United Kingdom of Great Britain and Northern Ireland\\r\\n  * GD : Grenada\\r\\n  * GE : Georgia\\r\\n  * GF : French Guiana\\r\\n  * GG : Guernsey\\r\\n  * GH : Ghana\\r\\n  * GI : Gibraltar\\r\\n  * GL : Greenland\\r\\n  * GM : Gambia\\r\\n  * GN : Guinea\\r\\n  * GP : Guadeloupe\\r\\n  * GQ : Equatorial Guinea\\r\\n  * GR : Greece\\r\\n  * GS : South Georgia and the South Sandwich Islands\\r\\n  * GT : Guatemala\\r\\n  * GU : Guam\\r\\n  * GW : Guinea-Bissau\\r\\n  * GY : Guyana\\r\\n  * HK : Hong Kong\\r\\n  * HM : Heard Island and McDonald Islands\\r\\n  * HN : Honduras\\r\\n  * HR : Croatia\\r\\n  * HT : Haiti\\r\\n  * HU : Hungary\\r\\n  * ID : Indonesia\\r\\n  * IE : Ireland\\r\\n  * IL : Israel\\r\\n  * IM : Isle of Man\\r\\n  * IN : India\\r\\n  * IO : British Indian Ocean Territory\\r\\n  * IQ : Iraq\\r\\n  * IR : Iran (Islamic Republic of)\\r\\n  * IS : Iceland\\r\\n  * IT : Italy\\r\\n  * JE : Jersey\\r\\n  * JM : Jamaica\\r\\n  * JO : Jordan\\r\\n  * JP : Japan\\r\\n  * KE : Kenya\\r\\n  * KG : Kyrgyzstan\\r\\n  * KH : Cambodia\\r\\n  * KI : Kiribati\\r\\n  * KM : Comoros\\r\\n  * KN : Saint Kitts and Nevis\\r\\n  * KP : Korea (Democratic People's Republic of)\\r\\n  * KR : Korea, Republic of\\r\\n  * KW : Kuwait\\r\\n  * KY : Cayman Islands\\r\\n  * KZ : Kazakhstan\\r\\n  * LA : Lao People's Democratic Republic\\r\\n  * LB : Lebanon\\r\\n  * LC : Saint Lucia\\r\\n  * LI : Liechtenstein\\r\\n  * LK : Sri Lanka\\r\\n  * LR : Liberia\\r\\n  * LS : Lesotho\\r\\n  * LT : Lithuania\\r\\n  * LU : Luxembourg\\r\\n  * LV : Latvia\\r\\n  * LY : Libya\\r\\n  * MA : Morocco\\r\\n  * MC : Monaco\\r\\n  * MD : Moldova, Republic of\\r\\n  * ME : Montenegro\\r\\n  * MF : Saint Martin (French part)\\r\\n  * MG : Madagascar\\r\\n  * MH : Marshall Islands\\r\\n  * MK : North Macedonia\\r\\n  * ML : Mali\\r\\n  * MM : Myanmar\\r\\n  * MN : Mongolia\\r\\n  * MO : Macao\\r\\n  * MP : Northern Mariana Islands\\r\\n  * MQ : Martinique\\r\\n  * MR : Mauritania\\r\\n  * MS : Montserrat\\r\\n  * MT : Malta\\r\\n  * MU : Mauritius\\r\\n  * MV : Maldives\\r\\n  * MW : Malawi\\r\\n  * MX : Mexico\\r\\n  * MY : Malaysia\\r\\n  * MZ : Mozambique\\r\\n  * NA : Namibia\\r\\n  * NC : New Caledonia\\r\\n  * NE : Niger\\r\\n  * NF : Norfolk Island\\r\\n  * NG : Nigeria\\r\\n  * NI : Nicaragua\\r\\n  * NL : Netherlands\\r\\n  * NO : Norway\\r\\n  * NP : Nepal\\r\\n  * NR : Nauru\\r\\n  * NU : Niue\\r\\n  * NZ : New Zealand\\r\\n  * OM : Oman\\r\\n  * PA : Panama\\r\\n  * PE : Peru\\r\\n  * PF : French Polynesia\\r\\n  * PG : Papua New Guinea\\r\\n  * PH : Philippines\\r\\n  * PK : Pakistan\\r\\n  * PL : Poland\\r\\n  * PM : Saint Pierre and Miquelon\\r\\n  * PN : Pitcairn\\r\\n  * PR : Puerto Rico\\r\\n  * PS : Palestine, State of\\r\\n  * PT : Portugal\\r\\n  * PW : Palau\\r\\n  * PY : Paraguay\\r\\n  * QA : Qatar\\r\\n  * RE : Reunion\\r\\n  * RO : Romania\\r\\n  * RS : Serbia\\r\\n  * RU : Russian Federation\\r\\n  * RW : Rwanda\\r\\n  * SA : Saudi Arabia\\r\\n  * SB : Solomon Islands\\r\\n  * SC : Seychelles\\r\\n  * SD : Sudan\\r\\n  * SE : Sweden\\r\\n  * SG : Singapore\\r\\n  * SH : Saint Helena, Ascension and Tristan da Cunha\\r\\n  * SI : Slovenia\\r\\n  * SJ : Svalbard and Jan Mayen\\r\\n  * SK : Slovakia\\r\\n  * SL : Sierra Leone\\r\\n  * SM : San Marino\\r\\n  * SN : Senegal\\r\\n  * SO : Somalia\\r\\n  * SR : Suriname\\r\\n  * SS : South Sudan\\r\\n  * ST : Sao Tome and Principe\\r\\n  * SV : El Salvador\\r\\n  * SX : Sint Maarten (Dutch part)\\r\\n  * SY : Syrian Arab Republic\\r\\n  * SZ : Eswatini\\r\\n  * TC : Turks and Caicos Islands\\r\\n  * TD : Chad\\r\\n  * TF : French Southern Territories\\r\\n  * TG : Togo\\r\\n  * TH : Thailand\\r\\n  * TJ : Tajikistan\\r\\n  * TK : Tokelau\\r\\n  * TL : Timor-Leste\\r\\n  * TM : Turkmenistan\\r\\n  * TN : Tunisia\\r\\n  * TO : Tonga\\r\\n  * TR : Turkey\\r\\n  * TT : Trinidad and Tobago\\r\\n  * TV : Tuvalu\\r\\n  * TW : Taiwan, Province of China\\r\\n  * TZ : Tanzania, United Republic of\\r\\n  * UA : Ukraine\\r\\n  * UG : Uganda\\r\\n  * UM : United States Minor Outlying Islands\\r\\n  * US : United States of America\\r\\n  * UY : Uruguay\\r\\n  * UZ : Uzbekistan\\r\\n  * VA : Holy See\\r\\n  * VC : Saint Vincent and the Grenadines\\r\\n  * VE : Venezuela (Bolivarian Republic of)\\r\\n  * VG : Virgin Islands (British)\\r\\n  * VI : Virgin Islands (U.S.)\\r\\n  * VN : Viet Nam\\r\\n  * VU : Vanuatu\\r\\n  * WF : Wallis and Futuna\\r\\n  * WS : Samoa\\r\\n  * YE : Yemen\\r\\n  * YT : Mayotte\\r\\n  * ZA : South Africa\\r\\n  * ZM : Zambia\\r\\n  * ZW : Zimbabwe\",\"symbols\":[\"AD\",\"AE\",\"AF\",\"AG\",\"AI\",\"AL\",\"AM\",\"AO\",\"AQ\",\"AR\",\"AS\",\"AT\",\"AU\",\"AW\",\"AX\",\"AZ\",\"BA\",\"BB\",\"BD\",\"BE\",\"BF\",\"BG\",\"BH\",\"BI\",\"BJ\",\"BL\",\"BM\",\"BN\",\"BO\",\"BQ\",\"BR\",\"BS\",\"BT\",\"BV\",\"BW\",\"BY\",\"BZ\",\"CA\",\"CC\",\"CD\",\"CF\",\"CG\",\"CH\",\"CI\",\"CK\",\"CL\",\"CM\",\"CN\",\"CO\",\"CR\",\"CU\",\"CV\",\"CW\",\"CX\",\"CY\",\"CZ\",\"DE\",\"DJ\",\"DK\",\"DM\",\"DO\",\"DZ\",\"EC\",\"EE\",\"EG\",\"EH\",\"ER\",\"ES\",\"ET\",\"FI\",\"FJ\",\"FK\",\"FM\",\"FO\",\"FR\",\"GA\",\"GB\",\"GD\",\"GE\",\"GF\",\"GG\",\"GH\",\"GI\",\"GL\",\"GM\",\"GN\",\"GP\",\"GQ\",\"GR\",\"GS\",\"GT\",\"GU\",\"GW\",\"GY\",\"HK\",\"HM\",\"HN\",\"HR\",\"HT\",\"HU\",\"ID\",\"IE\",\"IL\",\"IM\",\"IN\",\"IO\",\"IQ\",\"IR\",\"IS\",\"IT\",\"JE\",\"JM\",\"JO\",\"JP\",\"KE\",\"KG\",\"KH\",\"KI\",\"KM\",\"KN\",\"KP\",\"KR\",\"KW\",\"KY\",\"KZ\",\"LA\",\"LB\",\"LC\",\"LI\",\"LK\",\"LR\",\"LS\",\"LT\",\"LU\",\"LV\",\"LY\",\"MA\",\"MC\",\"MD\",\"ME\",\"MF\",\"MG\",\"MH\",\"MK\",\"ML\",\"MM\",\"MN\",\"MO\",\"MP\",\"MQ\",\"MR\",\"MS\",\"MT\",\"MU\",\"MV\",\"MW\",\"MX\",\"MY\",\"MZ\",\"NA\",\"NC\",\"NE\",\"NF\",\"NG\",\"NI\",\"NL\",\"NO\",\"NP\",\"NR\",\"NU\",\"NZ\",\"OM\",\"PA\",\"PE\",\"PF\",\"PG\",\"PH\",\"PK\",\"PL\",\"PM\",\"PN\",\"PR\",\"PS\",\"PT\",\"PW\",\"PY\",\"QA\",\"RE\",\"RO\",\"RS\",\"RU\",\"RW\",\"SA\",\"SB\",\"SC\",\"SD\",\"SE\",\"SG\",\"SH\",\"SI\",\"SJ\",\"SK\",\"SL\",\"SM\",\"SN\",\"SO\",\"SR\",\"SS\",\"ST\",\"SV\",\"SX\",\"SY\",\"SZ\",\"TC\",\"TD\",\"TF\",\"TG\",\"TH\",\"TJ\",\"TK\",\"TL\",\"TM\",\"TN\",\"TO\",\"TR\",\"TT\",\"TV\",\"TW\",\"TZ\",\"UA\",\"UG\",\"UM\",\"US\",\"UY\",\"UZ\",\"VA\",\"VC\",","\"VE\",\"VG\",\"VI\",\"VN\",\"VU\",\"WF\",\"WS\",\"YE\",\"YT\",\"ZA\",\"ZM\",\"ZW\"]},\"doc\":\"Country code associated with the domain producing the event.\\r\\n      Together with Channel and Platform give a complete picture of from where the event originated.\\r\\n      Should be US or CA.\\r\\n      Represented in [ISO 3166-2 alpha-2 format](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\"},{\"name\":\"channel\",\"type\":{\"type\":\"enum\",\"name\":\"Channel\",\"doc\":\"Channel is an identifier enum that represents the part of the Nordstrom family of businesses\\r\\n    the app, website, or other source is affiliated with.\\r\\n    If a new channel is added, the producer must version this schema.\\r\\n\\r\\n  * UNKNOWN : Default value for when reader doesn't recognize the value\\r\\n  * OMNI: Omni-market meaning all channels.  Should only be used if there is no differentiation at all between the code-paths and experience regardless of channel.\\r\\n  * FULL_LINE: Full price selling stores, local and digital experiences\\r\\n  * RACK: Nordstrom Rack physical and digital experiences\\r\\n  * HAUTELOOK: HauteLook\\r\\n  * TRUNKCLUB: Trunk Club physical and digital experiences\\r\\n  * CASHSTAR : CashStar\\r\\n  * EXTERNAL : Outside of Nordstrom channels\",\"symbols\":[\"UNKNOWN\",\"OMNI\",\"FULL_LINE\",\"RACK\",\"HAUTELOOK\",\"TRUNKCLUB\",\"CASHSTAR\",\"EXTERNAL\"],\"default\":\"UNKNOWN\"},\"doc\":\"Associated major business channel of the producing domain.\\r\\n      This is used to differentiate between full line, rack, haute look, trunk club - our major channels.\\r\\n      The channel country attribute is used to further distinguish USA vs CAN channels.\"},{\"name\":\"platform\",\"type\":{\"type\":\"enum\",\"name\":\"Platform\",\"doc\":\"Platform is an identifier enum that represents the base technology platform\\r\\n    solution the customer is using when the event occurs.\\r\\n    If a new platfrom is added, the producer must version this schema.\\r\\n\\r\\n  * UNKNOWN : Default value for when reader doesn't recognize the value\\r\\n  * WEB : Example: Desktop experience of Nordstrom.com\\r\\n  * MOW : Mobile on Web Example: Mobile experience of Nordstrom.com\\r\\n  * IOS : Customer Mobile App on iOS\\r\\n  * ANDROID : Customer Mobile App on Android\\r\\n  * POS : Point of Sale register or device\\r\\n  * IN_STORE_DIGITAL: digitally powered experiences in physical stores. Example: Fitting Room Button Application\\r\\n  * CSR_STORE : Customer service representative at store or local\\r\\n  * CSR_APP : Customer service representative through employee apps\\r\\n  * CSR_PHONE : Customer service representative over phone\\r\\n  * BACKEND_SERVICE : Backend system/service. DO NOT use when original decision or action came from a customer\\r\\n  * RPOS: Restaurant Point of Sale register or device\\r\\n  * THIRD_PARTY_VENDOR : External vendor. (e.g. Borderfree)\",\"symbols\":[\"UNKNOWN\",\"WEB\",\"MOW\",\"IOS\",\"ANDROID\",\"POS\",\"IN_STORE_DIGITAL\",\"CSR_STORE\",\"CSR_APP\",\"CSR_PHONE\",\"BACKEND_SERVICE\",\"RPOS\",\"THIRD_PARTY_VENDOR\"],\"default\":\"UNKNOWN\"},\"doc\":\"Platform of the producing domain.\\r\\n      This is used to understand which technical platform the event was sourced from.\\r\\n      Examples would be point of sale versus iOS versus web.\\r\\n      Events sourced from a web browser on an iOS or android device should use web.\"},{\"name\":\"feature\",\"type\":[\"null\",\"string\"],\"doc\":\"(Optional) Specific feature associated with this event from the producing domain.\\r\\n      As this is an open string, it is up to feature teams to manage and maintain data quality of these fields.\\r\\n      Examples: PDP, Looks mini-PDP, recommendations, purchase history, etc...\",\"default\":null},{\"name\":\"serviceName\",\"type\":[\"null\",\"string\"],\"doc\":\"(Optional) Name of the domain that produced the event.\\r\\n      Most likely this would be paired with an events source with a platform value of backend service to distinguish the service or service team. (Optional)\\r\\n      Examples: OMS: When OMS cancelled an order based on inventory shortage.\\r\\n      Incorrect usage; DO NOT use when original decision or action came from a customer\\r\\n      but the event was published by a backend service. Example, add to cart published by Checkout API.\",\"default\":null},{\"name\":\"store\",\"type\":[\"null\",\"string\"],\"doc\":\"(Optional) Physical store number.\\r\\n      MUST not be used for digital sales.\\r\\n      Wherever possible we'd like to move away from overloading store number and call out the actual source of the event using channel, channel country, platform, feature, and service name.\",\"default\":null},{\"name\":\"register\",\"type\":[\"null\",\"string\"],\"doc\":\"(Optional) POS register number in a physical store.\",\"default\":null}]},\"doc\":\"Information about the platform on which the adjustment request originated.\"},{\"name\":\"employee\",\"type\":{\"type\":\"record\",\"name\":\"Employee\",\"namespace\":\"com.nordstrom.event.rosettastone\",\"doc\":\"Information to identify an employee\",\"fields\":[{\"name\":\"idType\",\"type\":{\"type\":\"enum\",\"name\":\"EmployeeIdType\",\"doc\":\"Employee Id type identifier enum\\r\\n\\r\\n  * UNKNOWN : Default value for when reader doesn't recognize the value\\r\\n  * EMPLOYEE_NUMBER : Employee number\\r\\n  * EMPLOYEE_EMAIL : Employee email address (Not employee's personal email)\",\"symbols\":[\"UNKNOWN\",\"EMPLOYEE_NUMBER\",\"EMPLOYEE_EMAIL\"],\"default\":\"UNKNOWN\"},\"doc\":\"Type of Employee Id\"},{\"name\":\"id\",\"type\":\"string\",\"doc\":\"Identifier of an employee based on chosen EmployeeIdType\"}]},\"doc\":\"Identifying information about the employee that submitted the the adjustment request.\"},{\"name\":\"orderNumber\",\"type\":\"string\",\"doc\":\"The order number for the request.\"},{\"name\":\"orderLineId\",\"type\":[\"null\",\"string\"],\"doc\":\"The (optional) order line id for this request.\",\"default\":null},{\"name\":\"createTime\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"The date and time on which the agent submitted the request.\"},{\"name\":\"email\",\"type\":{\"type\":\"record\",\"name\":\"TokenizingValue\",\"namespace\":\"com.nordstrom.event.secure\",\"doc\":\"Defines a tokenizing value. A tokenizing value is tokenized at Avro serialization time.\\r\\n\\r\\n     A tokenized value is the replicable output of a function that takes a context and secret (in this case, the plaintext field) as input.\\r\\n\\r\\n     This type is designed to integrate with [Fort Knox](https://confluence.nordstrom.com/display/FORTKNOX/Project+Fort+Knox).\",\"fields\":[{\"name\":\"value\",\"type\":\"string\",\"doc\":\"The tokenized value. The generated value is unique for the given combination of authority and strategy.\"},{\"name\":\"authority\",\"type\":\"string\",\"doc\":\"The Fort Knox [authority](https://tokenize.prod.dots.vip.nordstrom.com/fortknox-grpc/) under which this token was created.\"},{\"name\":\"strategy\",\"type\":\"string\",\"doc\":\"The Fort Knox [strategy](https://tokenize.prod.dots.vip.nordstrom.com/fortknox-grpc/strategies) used to govern the format of this token when it was created.\",\"default\":\"default\"},{\"name\":\"dataClassification\",\"type\":{\"type\":\"enum\",\"name\":\"DataClassification\",\"doc\":\"Nordstrom data classification sensitivity levels. See the\\r\\n     [full definitions](https://gitlab.nordstrom.com/SecurityStandards/SecurityStandardsV1/blob/main/DataClassification.md).\",\"symbols\":[\"RESTRICTED\",\"SENSITIVE\",\"CONFIDENTIAL\"],\"default\":\"RESTRICTED\"},\"doc\":\"Security classification of this value at the time it is tokenized.\"}]},\"doc\":\"Email address to which the customer requested order correspondence be sent.\"},{\"name\":\"emailType\",\"type\":{\"type\":\"enum\",\"name\":\"EmailCommunicationType\",\"doc\":\"The type of correspondence. Applies to the use case where the user requests\\r\\n      that we resend an email (the ResendOrderCorrespondenceRequested event).\\r\\n\\r\\n        * UNKNOWN: Default value for when no value is provided.\\r\\n        * ORDER_CONFIRMATION: A resend of the original order confirmation message.\\r\\n        * CANCEL_CONFIRMATION: A resend of a cancel confirmation message.\\r\\n        * RETURN_CONFIRMATION: A resend of a return confirmation message.\\r\\n        * SHIPPING_CONFIRMATION: A resend of a shipping confirmation message.\\r\\n        * BACKORDER_FTC2: A resend of backorder ftc2 (backorder delay requested) message.\",\"symbols\":[\"UNKNOWN\",\"ORDER_CONFIRMATION\",\"CANCEL_CONFIRMATION\",\"RETURN_CONFIRMATION\",\"SHIPPING_CONFIRMATION\",\"BACKORDER_FTC2\"],\"default\":\"UNKNOWN","\"},\"doc\":\"The correspondence type.\"},{\"name\":\"replyBy\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"doc\":\"Date by which cutomer needs to respond to avoid the systematic cancellation as per FTC regulation\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<EmailCommunicationRequested> ENCODER =
      new BinaryMessageEncoder<EmailCommunicationRequested>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EmailCommunicationRequested> DECODER =
      new BinaryMessageDecoder<EmailCommunicationRequested>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<EmailCommunicationRequested> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<EmailCommunicationRequested> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<EmailCommunicationRequested> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<EmailCommunicationRequested>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this EmailCommunicationRequested to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a EmailCommunicationRequested from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a EmailCommunicationRequested instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static EmailCommunicationRequested fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Information about the platform on which the adjustment request originated. */
   private com.nordstrom.event.rosettastone.Source source;
  /** Identifying information about the employee that submitted the the adjustment request. */
   private com.nordstrom.event.rosettastone.Employee employee;
  /** The order number for the request. */
   private java.lang.CharSequence orderNumber;
  /** The (optional) order line id for this request. */
   private java.lang.CharSequence orderLineId;
  /** The date and time on which the agent submitted the request. */
   private java.time.Instant createTime;
  /** Email address to which the customer requested order correspondence be sent. */
   private com.nordstrom.event.secure.TokenizingValue email;
  /** The correspondence type. */
   private com.nordstrom.care.communications.EmailCommunicationType emailType;
  /** Date by which cutomer needs to respond to avoid the systematic cancellation as per FTC regulation */
   private java.time.Instant replyBy;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EmailCommunicationRequested() {}

  /**
   * All-args constructor.
   * @param source Information about the platform on which the adjustment request originated.
   * @param employee Identifying information about the employee that submitted the the adjustment request.
   * @param orderNumber The order number for the request.
   * @param orderLineId The (optional) order line id for this request.
   * @param createTime The date and time on which the agent submitted the request.
   * @param email Email address to which the customer requested order correspondence be sent.
   * @param emailType The correspondence type.
   * @param replyBy Date by which cutomer needs to respond to avoid the systematic cancellation as per FTC regulation
   */
  public EmailCommunicationRequested(com.nordstrom.event.rosettastone.Source source, com.nordstrom.event.rosettastone.Employee employee, java.lang.CharSequence orderNumber, java.lang.CharSequence orderLineId, java.time.Instant createTime, com.nordstrom.event.secure.TokenizingValue email, com.nordstrom.care.communications.EmailCommunicationType emailType, java.time.Instant replyBy) {
    this.source = source;
    this.employee = employee;
    this.orderNumber = orderNumber;
    this.orderLineId = orderLineId;
    this.createTime = createTime.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.email = email;
    this.emailType = emailType;
    this.replyBy = replyBy;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return source;
    case 1: return employee;
    case 2: return orderNumber;
    case 3: return orderLineId;
    case 4: return createTime;
    case 5: return email;
    case 6: return emailType;
    case 7: return replyBy;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: source = (com.nordstrom.event.rosettastone.Source)value$; break;
    case 1: employee = (com.nordstrom.event.rosettastone.Employee)value$; break;
    case 2: orderNumber = (java.lang.CharSequence)value$; break;
    case 3: orderLineId = (java.lang.CharSequence)value$; break;
    case 4: createTime = (java.time.Instant)value$; break;
    case 5: email = (com.nordstrom.event.secure.TokenizingValue)value$; break;
    case 6: emailType = (com.nordstrom.care.communications.EmailCommunicationType)value$; break;
    case 7: replyBy = (java.time.Instant)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'source' field.
   * @return Information about the platform on which the adjustment request originated.
   */
  public com.nordstrom.event.rosettastone.Source getSource() {
    return source;
  }


  /**
   * Sets the value of the 'source' field.
   * Information about the platform on which the adjustment request originated.
   * @param value the value to set.
   */
  public void setSource(com.nordstrom.event.rosettastone.Source value) {
    this.source = value;
  }

  /**
   * Gets the value of the 'employee' field.
   * @return Identifying information about the employee that submitted the the adjustment request.
   */
  public com.nordstrom.event.rosettastone.Employee getEmployee() {
    return employee;
  }


  /**
   * Sets the value of the 'employee' field.
   * Identifying information about the employee that submitted the the adjustment request.
   * @param value the value to set.
   */
  public void setEmployee(com.nordstrom.event.rosettastone.Employee value) {
    this.employee = value;
  }

  /**
   * Gets the value of the 'orderNumber' field.
   * @return The order number for the request.
   */
  public java.lang.CharSequence getOrderNumber() {
    return orderNumber;
  }


  /**
   * Sets the value of the 'orderNumber' field.
   * The order number for the request.
   * @param value the value to set.
   */
  public void setOrderNumber(java.lang.CharSequence value) {
    this.orderNumber = value;
  }

  /**
   * Gets the value of the 'orderLineId' field.
   * @return The (optional) order line id for this request.
   */
  public java.lang.CharSequence getOrderLineId() {
    return orderLineId;
  }


  /**
   * Sets the value of the 'orderLineId' field.
   * The (optional) order line id for this request.
   * @param value the value to set.
   */
  public void setOrderLineId(java.lang.CharSequence value) {
    this.orderLineId = value;
  }

  /**
   * Gets the value of the 'createTime' field.
   * @return The date and time on which the agent submitted the request.
   */
  public java.time.Instant getCreateTime() {
    return createTime;
  }


  /**
   * Sets the value of the 'createTime' field.
   * The date and time on which the agent submitted the request.
   * @param value the value to set.
   */
  public void setCreateTime(java.time.Instant value) {
    this.createTime = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'email' field.
   * @return Email address to which the customer requested order correspondence be sent.
   */
  public com.nordstrom.event.secure.TokenizingValue getEmail() {
    return email;
  }


  /**
   * Sets the value of the 'email' field.
   * Email address to which the customer requested order correspondence be sent.
   * @param value the value to set.
   */
  public void setEmail(com.nordstrom.event.secure.TokenizingValue value) {
    this.email = value;
  }

  /**
   * Gets the value of the 'emailType' field.
   * @return The correspondence type.
   */
  public com.nordstrom.care.communications.EmailCommunicationType getEmailType() {
    return emailType;
  }


  /**
   * Sets the value of the 'emailType' field.
   * The correspondence type.
   * @param value the value to set.
   */
  public void setEmailType(com.nordstrom.care.communications.EmailCommunicationType value) {
    this.emailType = value;
  }

  /**
   * Gets the value of the 'replyBy' field.
   * @return Date by which cutomer needs to respond to avoid the systematic cancellation as per FTC regulation
   */
  public java.time.Instant getReplyBy() {
    return replyBy;
  }


  /**
   * Sets the value of the 'replyBy' field.
   * Date by which cutomer needs to respond to avoid the systematic cancellation as per FTC regulation
   * @param value the value to set.
   */
  public void setReplyBy(java.time.Instant value) {
    this.replyBy = value;
  }

  /**
   * Creates a new EmailCommunicationRequested RecordBuilder.
   * @return A new EmailCommunicationRequested RecordBuilder
   */
  public static com.nordstrom.care.communications.EmailCommunicationRequested.Builder newBuilder() {
    return new com.nordstrom.care.communications.EmailCommunicationRequested.Builder();
  }

  /**
   * Creates a new EmailCommunicationRequested RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EmailCommunicationRequested RecordBuilder
   */
  public static com.nordstrom.care.communications.EmailCommunicationRequested.Builder newBuilder(com.nordstrom.care.communications.EmailCommunicationRequested.Builder other) {
    if (other == null) {
      return new com.nordstrom.care.communications.EmailCommunicationRequested.Builder();
    } else {
      return new com.nordstrom.care.communications.EmailCommunicationRequested.Builder(other);
    }
  }

  /**
   * Creates a new EmailCommunicationRequested RecordBuilder by copying an existing EmailCommunicationRequested instance.
   * @param other The existing instance to copy.
   * @return A new EmailCommunicationRequested RecordBuilder
   */
  public static com.nordstrom.care.communications.EmailCommunicationRequested.Builder newBuilder(com.nordstrom.care.communications.EmailCommunicationRequested other) {
    if (other == null) {
      return new com.nordstrom.care.communications.EmailCommunicationRequested.Builder();
    } else {
      return new com.nordstrom.care.communications.EmailCommunicationRequested.Builder(other);
    }
  }

  /**
   * RecordBuilder for EmailCommunicationRequested instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EmailCommunicationRequested>
    implements org.apache.avro.data.RecordBuilder<EmailCommunicationRequested> {

    /** Information about the platform on which the adjustment request originated. */
    private com.nordstrom.event.rosettastone.Source source;
    private com.nordstrom.event.rosettastone.Source.Builder sourceBuilder;
    /** Identifying information about the employee that submitted the the adjustment request. */
    private com.nordstrom.event.rosettastone.Employee employee;
    private com.nordstrom.event.rosettastone.Employee.Builder employeeBuilder;
    /** The order number for the request. */
    private java.lang.CharSequence orderNumber;
    /** The (optional) order line id for this request. */
    private java.lang.CharSequence orderLineId;
    /** The date and time on which the agent submitted the request. */
    private java.time.Instant createTime;
    /** Email address to which the customer requested order correspondence be sent. */
    private com.nordstrom.event.secure.TokenizingValue email;
    private com.nordstrom.event.secure.TokenizingValue.Builder emailBuilder;
    /** The correspondence type. */
    private com.nordstrom.care.communications.EmailCommunicationType emailType;
    /** Date by which cutomer needs to respond to avoid the systematic cancellation as per FTC regulation */
    private java.time.Instant replyBy;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.nordstrom.care.communications.EmailCommunicationRequested.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.source)) {
        this.source = data().deepCopy(fields()[0].schema(), other.source);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasSourceBuilder()) {
        this.sourceBuilder = com.nordstrom.event.rosettastone.Source.newBuilder(other.getSourceBuilder());
      }
      if (isValidValue(fields()[1], other.employee)) {
        this.employee = data().deepCopy(fields()[1].schema(), other.employee);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasEmployeeBuilder()) {
        this.employeeBuilder = com.nordstrom.event.rosettastone.Employee.newBuilder(other.getEmployeeBuilder());
      }
      if (isValidValue(fields()[2], other.orderNumber)) {
        this.orderNumber = data().deepCopy(fields()[2].schema(), other.orderNumber);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.orderLineId)) {
        this.orderLineId = data().deepCopy(fields()[3].schema(), other.orderLineId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.createTime)) {
        this.createTime = data().deepCopy(fields()[4].schema(), other.createTime);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.email)) {
        this.email = data().deepCopy(fields()[5].schema(), other.email);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (other.hasEmailBuilder()) {
        this.emailBuilder = com.nordstrom.event.secure.TokenizingValue.newBuilder(other.getEmailBuilder());
      }
      if (isValidValue(fields()[6], other.emailType)) {
        this.emailType = data().deepCopy(fields()[6].schema(), other.emailType);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.replyBy)) {
        this.replyBy = data().deepCopy(fields()[7].schema(), other.replyBy);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing EmailCommunicationRequested instance
     * @param other The existing instance to copy.
     */
    private Builder(com.nordstrom.care.communications.EmailCommunicationRequested other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.source)) {
        this.source = data().deepCopy(fields()[0].schema(), other.source);
        fieldSetFlags()[0] = true;
      }
      this.sourceBuilder = null;
      if (isValidValue(fields()[1], other.employee)) {
        this.employee = data().deepCopy(fields()[1].schema(), other.employee);
        fieldSetFlags()[1] = true;
      }
      this.employeeBuilder = null;
      if (isValidValue(fields()[2], other.orderNumber)) {
        this.orderNumber = data().deepCopy(fields()[2].schema(), other.orderNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.orderLineId)) {
        this.orderLineId = data().deepCopy(fields()[3].schema(), other.orderLineId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.createTime)) {
        this.createTime = data().deepCopy(fields()[4].schema(), other.createTime);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.email)) {
        this.email = data().deepCopy(fields()[5].schema(), other.email);
        fieldSetFlags()[5] = true;
      }
      this.emailBuilder = null;
      if (isValidValue(fields()[6], other.emailType)) {
        this.emailType = data().deepCopy(fields()[6].schema(), other.emailType);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.replyBy)) {
        this.replyBy = data().deepCopy(fields()[7].schema(), other.replyBy);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'source' field.
      * Information about the platform on which the adjustment request originated.
      * @return The value.
      */
    public com.nordstrom.event.rosettastone.Source getSource() {
      return source;
    }


    /**
      * Sets the value of the 'source' field.
      * Information about the platform on which the adjustment request originated.
      * @param value The value of 'source'.
      * @return This builder.
      */
    public com.nordstrom.care.communications.EmailCommunicationRequested.Builder setSource(com.nordstrom.event.rosettastone.Source value) {
      validate(fields()[0], value);
      this.sourceBuilder = null;
      this.source = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'source' field has been set.
      * Information about the platform on which the adjustment request originated.
      * @return True if the 'source' field has been set, false otherwise.
      */
    public boolean hasSource() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'source' field and creates one if it doesn't exist yet.
     * Information about the platform on which the adjustment request originated.
     * @return This builder.
     */
    public com.nordstrom.event.rosettastone.Source.Builder getSourceBuilder() {
      if (sourceBuilder == null) {
        if (hasSource()) {
          setSourceBuilder(com.nordstrom.event.rosettastone.Source.newBuilder(source));
        } else {
          setSourceBuilder(com.nordstrom.event.rosettastone.Source.newBuilder());
        }
      }
      return sourceBuilder;
    }

    /**
     * Sets the Builder instance for the 'source' field
     * Information about the platform on which the adjustment request originated.
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.nordstrom.care.communications.EmailCommunicationRequested.Builder setSourceBuilder(com.nordstrom.event.rosettastone.Source.Builder value) {
      clearSource();
      sourceBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'source' field has an active Builder instance
     * Information about the platform on which the adjustment request originated.
     * @return True if the 'source' field has an active Builder instance
     */
    public boolean hasSourceBuilder() {
      return sourceBuilder != null;
    }

    /**
      * Clears the value of the 'source' field.
      * Information about the platform on which the adjustment request originated.
      * @return This builder.
      */
    public com.nordstrom.care.communications.EmailCommunicationRequested.Builder clearSource() {
      source = null;
      sourceBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'employee' field.
      * Identifying information about the employee that submitted the the adjustment request.
      * @return The value.
      */
    public com.nordstrom.event.rosettastone.Employee getEmployee() {
      return employee;
    }


    /**
      * Sets the value of the 'employee' field.
      * Identifying information about the employee that submitted the the adjustment request.
      * @param value The value of 'employee'.
      * @return This builder.
      */
    public com.nordstrom.care.communications.EmailCommunicationRequested.Builder setEmployee(com.nordstrom.event.rosettastone.Employee value) {
      validate(fields()[1], value);
      this.employeeBuilder = null;
      this.employee = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'employee' field has been set.
      * Identifying information about the employee that submitted the the adjustment request.
      * @return True if the 'employee' field has been set, false otherwise.
      */
    public boolean hasEmployee() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'employee' field and creates one if it doesn't exist yet.
     * Identifying information about the employee that submitted the the adjustment request.
     * @return This builder.
     */
    public com.nordstrom.event.rosettastone.Employee.Builder getEmployeeBuilder() {
      if (employeeBuilder == null) {
        if (hasEmployee()) {
          setEmployeeBuilder(com.nordstrom.event.rosettastone.Employee.newBuilder(employee));
        } else {
          setEmployeeBuilder(com.nordstrom.event.rosettastone.Employee.newBuilder());
        }
      }
      return employeeBuilder;
    }

    /**
     * Sets the Builder instance for the 'employee' field
     * Identifying information about the employee that submitted the the adjustment request.
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.nordstrom.care.communications.EmailCommunicationRequested.Builder setEmployeeBuilder(com.nordstrom.event.rosettastone.Employee.Builder value) {
      clearEmployee();
      employeeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'employee' field has an active Builder instance
     * Identifying information about the employee that submitted the the adjustment request.
     * @return True if the 'employee' field has an active Builder instance
     */
    public boolean hasEmployeeBuilder() {
      return employeeBuilder != null;
    }

    /**
      * Clears the value of the 'employee' field.
      * Identifying information about the employee that submitted the the adjustment request.
      * @return This builder.
      */
    public com.nordstrom.care.communications.EmailCommunicationRequested.Builder clearEmployee() {
      employee = null;
      employeeBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderNumber' field.
      * The order number for the request.
      * @return The value.
      */
    public java.lang.CharSequence getOrderNumber() {
      return orderNumber;
    }


    /**
      * Sets the value of the 'orderNumber' field.
      * The order number for the request.
      * @param value The value of 'orderNumber'.
      * @return This builder.
      */
    public com.nordstrom.care.communications.EmailCommunicationRequested.Builder setOrderNumber(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.orderNumber = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'orderNumber' field has been set.
      * The order number for the request.
      * @return True if the 'orderNumber' field has been set, false otherwise.
      */
    public boolean hasOrderNumber() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'orderNumber' field.
      * The order number for the request.
      * @return This builder.
      */
    public com.nordstrom.care.communications.EmailCommunicationRequested.Builder clearOrderNumber() {
      orderNumber = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderLineId' field.
      * The (optional) order line id for this request.
      * @return The value.
      */
    public java.lang.CharSequence getOrderLineId() {
      return orderLineId;
    }


    /**
      * Sets the value of the 'orderLineId' field.
      * The (optional) order line id for this request.
      * @param value The value of 'orderLineId'.
      * @return This builder.
      */
    public com.nordstrom.care.communications.EmailCommunicationRequested.Builder setOrderLineId(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.orderLineId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'orderLineId' field has been set.
      * The (optional) order line id for this request.
      * @return True if the 'orderLineId' field has been set, false otherwise.
      */
    public boolean hasOrderLineId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'orderLineId' field.
      * The (optional) order line id for this request.
      * @return This builder.
      */
    public com.nordstrom.care.communications.EmailCommunicationRequested.Builder clearOrderLineId() {
      orderLineId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'createTime' field.
      * The date and time on which the agent submitted the request.
      * @return The value.
      */
    public java.time.Instant getCreateTime() {
      return createTime;
    }


    /**
      * Sets the value of the 'createTime' field.
      * The date and time on which the agent submitted the request.
      * @param value The value of 'createTime'.
      * @return This builder.
      */
    public com.nordstrom.care.communications.EmailCommunicationRequested.Builder setCreateTime(java.time.Instant value) {
      validate(fields()[4], value);
      this.createTime = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'createTime' field has been set.
      * The date and time on which the agent submitted the request.
      * @return True if the 'createTime' field has been set, false otherwise.
      */
    public boolean hasCreateTime() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'createTime' field.
      * The date and time on which the agent submitted the request.
      * @return This builder.
      */
    public com.nordstrom.care.communications.EmailCommunicationRequested.Builder clearCreateTime() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'email' field.
      * Email address to which the customer requested order correspondence be sent.
      * @return The value.
      */
    public com.nordstrom.event.secure.TokenizingValue getEmail() {
      return email;
    }


    /**
      * Sets the value of the 'email' field.
      * Email address to which the customer requested order correspondence be sent.
      * @param value The value of 'email'.
      * @return This builder.
      */
    public com.nordstrom.care.communications.EmailCommunicationRequested.Builder setEmail(com.nordstrom.event.secure.TokenizingValue value) {
      validate(fields()[5], value);
      this.emailBuilder = null;
      this.email = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * Email address to which the customer requested order correspondence be sent.
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'email' field and creates one if it doesn't exist yet.
     * Email address to which the customer requested order correspondence be sent.
     * @return This builder.
     */
    public com.nordstrom.event.secure.TokenizingValue.Builder getEmailBuilder() {
      if (emailBuilder == null) {
        if (hasEmail()) {
          setEmailBuilder(com.nordstrom.event.secure.TokenizingValue.newBuilder(email));
        } else {
          setEmailBuilder(com.nordstrom.event.secure.TokenizingValue.newBuilder());
        }
      }
      return emailBuilder;
    }

    /**
     * Sets the Builder instance for the 'email' field
     * Email address to which the customer requested order correspondence be sent.
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.nordstrom.care.communications.EmailCommunicationRequested.Builder setEmailBuilder(com.nordstrom.event.secure.TokenizingValue.Builder value) {
      clearEmail();
      emailBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'email' field has an active Builder instance
     * Email address to which the customer requested order correspondence be sent.
     * @return True if the 'email' field has an active Builder instance
     */
    public boolean hasEmailBuilder() {
      return emailBuilder != null;
    }

    /**
      * Clears the value of the 'email' field.
      * Email address to which the customer requested order correspondence be sent.
      * @return This builder.
      */
    public com.nordstrom.care.communications.EmailCommunicationRequested.Builder clearEmail() {
      email = null;
      emailBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'emailType' field.
      * The correspondence type.
      * @return The value.
      */
    public com.nordstrom.care.communications.EmailCommunicationType getEmailType() {
      return emailType;
    }


    /**
      * Sets the value of the 'emailType' field.
      * The correspondence type.
      * @param value The value of 'emailType'.
      * @return This builder.
      */
    public com.nordstrom.care.communications.EmailCommunicationRequested.Builder setEmailType(com.nordstrom.care.communications.EmailCommunicationType value) {
      validate(fields()[6], value);
      this.emailType = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'emailType' field has been set.
      * The correspondence type.
      * @return True if the 'emailType' field has been set, false otherwise.
      */
    public boolean hasEmailType() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'emailType' field.
      * The correspondence type.
      * @return This builder.
      */
    public com.nordstrom.care.communications.EmailCommunicationRequested.Builder clearEmailType() {
      emailType = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'replyBy' field.
      * Date by which cutomer needs to respond to avoid the systematic cancellation as per FTC regulation
      * @return The value.
      */
    public java.time.Instant getReplyBy() {
      return replyBy;
    }


    /**
      * Sets the value of the 'replyBy' field.
      * Date by which cutomer needs to respond to avoid the systematic cancellation as per FTC regulation
      * @param value The value of 'replyBy'.
      * @return This builder.
      */
    public com.nordstrom.care.communications.EmailCommunicationRequested.Builder setReplyBy(java.time.Instant value) {
      validate(fields()[7], value);
      this.replyBy = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'replyBy' field has been set.
      * Date by which cutomer needs to respond to avoid the systematic cancellation as per FTC regulation
      * @return True if the 'replyBy' field has been set, false otherwise.
      */
    public boolean hasReplyBy() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'replyBy' field.
      * Date by which cutomer needs to respond to avoid the systematic cancellation as per FTC regulation
      * @return This builder.
      */
    public com.nordstrom.care.communications.EmailCommunicationRequested.Builder clearReplyBy() {
      replyBy = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EmailCommunicationRequested build() {
      try {
        EmailCommunicationRequested record = new EmailCommunicationRequested();
        if (sourceBuilder != null) {
          try {
            record.source = this.sourceBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("source"));
            throw e;
          }
        } else {
          record.source = fieldSetFlags()[0] ? this.source : (com.nordstrom.event.rosettastone.Source) defaultValue(fields()[0]);
        }
        if (employeeBuilder != null) {
          try {
            record.employee = this.employeeBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("employee"));
            throw e;
          }
        } else {
          record.employee = fieldSetFlags()[1] ? this.employee : (com.nordstrom.event.rosettastone.Employee) defaultValue(fields()[1]);
        }
        record.orderNumber = fieldSetFlags()[2] ? this.orderNumber : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.orderLineId = fieldSetFlags()[3] ? this.orderLineId : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.createTime = fieldSetFlags()[4] ? this.createTime : (java.time.Instant) defaultValue(fields()[4]);
        if (emailBuilder != null) {
          try {
            record.email = this.emailBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("email"));
            throw e;
          }
        } else {
          record.email = fieldSetFlags()[5] ? this.email : (com.nordstrom.event.secure.TokenizingValue) defaultValue(fields()[5]);
        }
        record.emailType = fieldSetFlags()[6] ? this.emailType : (com.nordstrom.care.communications.EmailCommunicationType) defaultValue(fields()[6]);
        record.replyBy = fieldSetFlags()[7] ? this.replyBy : (java.time.Instant) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EmailCommunicationRequested>
    WRITER$ = (org.apache.avro.io.DatumWriter<EmailCommunicationRequested>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EmailCommunicationRequested>
    READER$ = (org.apache.avro.io.DatumReader<EmailCommunicationRequested>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










