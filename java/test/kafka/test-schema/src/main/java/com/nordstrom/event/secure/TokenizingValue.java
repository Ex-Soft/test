/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.nordstrom.event.secure;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Defines a tokenizing value. A tokenizing value is tokenized at Avro serialization time.

     A tokenized value is the replicable output of a function that takes a context and secret (in this case, the plaintext field) as input.

     This type is designed to integrate with [Fort Knox](https://confluence.nordstrom.com/display/FORTKNOX/Project+Fort+Knox). */
@org.apache.avro.specific.AvroGenerated
public class TokenizingValue extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3486423659675819693L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TokenizingValue\",\"namespace\":\"com.nordstrom.event.secure\",\"doc\":\"Defines a tokenizing value. A tokenizing value is tokenized at Avro serialization time.\\r\\n\\r\\n     A tokenized value is the replicable output of a function that takes a context and secret (in this case, the plaintext field) as input.\\r\\n\\r\\n     This type is designed to integrate with [Fort Knox](https://confluence.nordstrom.com/display/FORTKNOX/Project+Fort+Knox).\",\"fields\":[{\"name\":\"value\",\"type\":\"string\",\"doc\":\"The tokenized value. The generated value is unique for the given combination of authority and strategy.\"},{\"name\":\"authority\",\"type\":\"string\",\"doc\":\"The Fort Knox [authority](https://tokenize.prod.dots.vip.nordstrom.com/fortknox-grpc/) under which this token was created.\"},{\"name\":\"strategy\",\"type\":\"string\",\"doc\":\"The Fort Knox [strategy](https://tokenize.prod.dots.vip.nordstrom.com/fortknox-grpc/strategies) used to govern the format of this token when it was created.\",\"default\":\"default\"},{\"name\":\"dataClassification\",\"type\":{\"type\":\"enum\",\"name\":\"DataClassification\",\"doc\":\"Nordstrom data classification sensitivity levels. See the\\r\\n     [full definitions](https://gitlab.nordstrom.com/SecurityStandards/SecurityStandardsV1/blob/main/DataClassification.md).\",\"symbols\":[\"RESTRICTED\",\"SENSITIVE\",\"CONFIDENTIAL\"],\"default\":\"RESTRICTED\"},\"doc\":\"Security classification of this value at the time it is tokenized.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TokenizingValue> ENCODER =
      new BinaryMessageEncoder<TokenizingValue>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TokenizingValue> DECODER =
      new BinaryMessageDecoder<TokenizingValue>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TokenizingValue> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TokenizingValue> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TokenizingValue> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TokenizingValue>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TokenizingValue to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TokenizingValue from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TokenizingValue instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TokenizingValue fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The tokenized value. The generated value is unique for the given combination of authority and strategy. */
   private java.lang.CharSequence value;
  /** The Fort Knox [authority](https://tokenize.prod.dots.vip.nordstrom.com/fortknox-grpc/) under which this token was created. */
   private java.lang.CharSequence authority;
  /** The Fort Knox [strategy](https://tokenize.prod.dots.vip.nordstrom.com/fortknox-grpc/strategies) used to govern the format of this token when it was created. */
   private java.lang.CharSequence strategy;
  /** Security classification of this value at the time it is tokenized. */
   private com.nordstrom.event.secure.DataClassification dataClassification;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TokenizingValue() {}

  /**
   * All-args constructor.
   * @param value The tokenized value. The generated value is unique for the given combination of authority and strategy.
   * @param authority The Fort Knox [authority](https://tokenize.prod.dots.vip.nordstrom.com/fortknox-grpc/) under which this token was created.
   * @param strategy The Fort Knox [strategy](https://tokenize.prod.dots.vip.nordstrom.com/fortknox-grpc/strategies) used to govern the format of this token when it was created.
   * @param dataClassification Security classification of this value at the time it is tokenized.
   */
  public TokenizingValue(java.lang.CharSequence value, java.lang.CharSequence authority, java.lang.CharSequence strategy, com.nordstrom.event.secure.DataClassification dataClassification) {
    this.value = value;
    this.authority = authority;
    this.strategy = strategy;
    this.dataClassification = dataClassification;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return value;
    case 1: return authority;
    case 2: return strategy;
    case 3: return dataClassification;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: value = (java.lang.CharSequence)value$; break;
    case 1: authority = (java.lang.CharSequence)value$; break;
    case 2: strategy = (java.lang.CharSequence)value$; break;
    case 3: dataClassification = (com.nordstrom.event.secure.DataClassification)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'value' field.
   * @return The tokenized value. The generated value is unique for the given combination of authority and strategy.
   */
  public java.lang.CharSequence getValue() {
    return value;
  }


  /**
   * Sets the value of the 'value' field.
   * The tokenized value. The generated value is unique for the given combination of authority and strategy.
   * @param value the value to set.
   */
  public void setValue(java.lang.CharSequence value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'authority' field.
   * @return The Fort Knox [authority](https://tokenize.prod.dots.vip.nordstrom.com/fortknox-grpc/) under which this token was created.
   */
  public java.lang.CharSequence getAuthority() {
    return authority;
  }


  /**
   * Sets the value of the 'authority' field.
   * The Fort Knox [authority](https://tokenize.prod.dots.vip.nordstrom.com/fortknox-grpc/) under which this token was created.
   * @param value the value to set.
   */
  public void setAuthority(java.lang.CharSequence value) {
    this.authority = value;
  }

  /**
   * Gets the value of the 'strategy' field.
   * @return The Fort Knox [strategy](https://tokenize.prod.dots.vip.nordstrom.com/fortknox-grpc/strategies) used to govern the format of this token when it was created.
   */
  public java.lang.CharSequence getStrategy() {
    return strategy;
  }


  /**
   * Sets the value of the 'strategy' field.
   * The Fort Knox [strategy](https://tokenize.prod.dots.vip.nordstrom.com/fortknox-grpc/strategies) used to govern the format of this token when it was created.
   * @param value the value to set.
   */
  public void setStrategy(java.lang.CharSequence value) {
    this.strategy = value;
  }

  /**
   * Gets the value of the 'dataClassification' field.
   * @return Security classification of this value at the time it is tokenized.
   */
  public com.nordstrom.event.secure.DataClassification getDataClassification() {
    return dataClassification;
  }


  /**
   * Sets the value of the 'dataClassification' field.
   * Security classification of this value at the time it is tokenized.
   * @param value the value to set.
   */
  public void setDataClassification(com.nordstrom.event.secure.DataClassification value) {
    this.dataClassification = value;
  }

  /**
   * Creates a new TokenizingValue RecordBuilder.
   * @return A new TokenizingValue RecordBuilder
   */
  public static com.nordstrom.event.secure.TokenizingValue.Builder newBuilder() {
    return new com.nordstrom.event.secure.TokenizingValue.Builder();
  }

  /**
   * Creates a new TokenizingValue RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TokenizingValue RecordBuilder
   */
  public static com.nordstrom.event.secure.TokenizingValue.Builder newBuilder(com.nordstrom.event.secure.TokenizingValue.Builder other) {
    if (other == null) {
      return new com.nordstrom.event.secure.TokenizingValue.Builder();
    } else {
      return new com.nordstrom.event.secure.TokenizingValue.Builder(other);
    }
  }

  /**
   * Creates a new TokenizingValue RecordBuilder by copying an existing TokenizingValue instance.
   * @param other The existing instance to copy.
   * @return A new TokenizingValue RecordBuilder
   */
  public static com.nordstrom.event.secure.TokenizingValue.Builder newBuilder(com.nordstrom.event.secure.TokenizingValue other) {
    if (other == null) {
      return new com.nordstrom.event.secure.TokenizingValue.Builder();
    } else {
      return new com.nordstrom.event.secure.TokenizingValue.Builder(other);
    }
  }

  /**
   * RecordBuilder for TokenizingValue instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TokenizingValue>
    implements org.apache.avro.data.RecordBuilder<TokenizingValue> {

    /** The tokenized value. The generated value is unique for the given combination of authority and strategy. */
    private java.lang.CharSequence value;
    /** The Fort Knox [authority](https://tokenize.prod.dots.vip.nordstrom.com/fortknox-grpc/) under which this token was created. */
    private java.lang.CharSequence authority;
    /** The Fort Knox [strategy](https://tokenize.prod.dots.vip.nordstrom.com/fortknox-grpc/strategies) used to govern the format of this token when it was created. */
    private java.lang.CharSequence strategy;
    /** Security classification of this value at the time it is tokenized. */
    private com.nordstrom.event.secure.DataClassification dataClassification;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.nordstrom.event.secure.TokenizingValue.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.value)) {
        this.value = data().deepCopy(fields()[0].schema(), other.value);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.authority)) {
        this.authority = data().deepCopy(fields()[1].schema(), other.authority);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.strategy)) {
        this.strategy = data().deepCopy(fields()[2].schema(), other.strategy);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.dataClassification)) {
        this.dataClassification = data().deepCopy(fields()[3].schema(), other.dataClassification);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing TokenizingValue instance
     * @param other The existing instance to copy.
     */
    private Builder(com.nordstrom.event.secure.TokenizingValue other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.value)) {
        this.value = data().deepCopy(fields()[0].schema(), other.value);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.authority)) {
        this.authority = data().deepCopy(fields()[1].schema(), other.authority);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.strategy)) {
        this.strategy = data().deepCopy(fields()[2].schema(), other.strategy);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.dataClassification)) {
        this.dataClassification = data().deepCopy(fields()[3].schema(), other.dataClassification);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'value' field.
      * The tokenized value. The generated value is unique for the given combination of authority and strategy.
      * @return The value.
      */
    public java.lang.CharSequence getValue() {
      return value;
    }


    /**
      * Sets the value of the 'value' field.
      * The tokenized value. The generated value is unique for the given combination of authority and strategy.
      * @param value The value of 'value'.
      * @return This builder.
      */
    public com.nordstrom.event.secure.TokenizingValue.Builder setValue(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.value = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * The tokenized value. The generated value is unique for the given combination of authority and strategy.
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'value' field.
      * The tokenized value. The generated value is unique for the given combination of authority and strategy.
      * @return This builder.
      */
    public com.nordstrom.event.secure.TokenizingValue.Builder clearValue() {
      value = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'authority' field.
      * The Fort Knox [authority](https://tokenize.prod.dots.vip.nordstrom.com/fortknox-grpc/) under which this token was created.
      * @return The value.
      */
    public java.lang.CharSequence getAuthority() {
      return authority;
    }


    /**
      * Sets the value of the 'authority' field.
      * The Fort Knox [authority](https://tokenize.prod.dots.vip.nordstrom.com/fortknox-grpc/) under which this token was created.
      * @param value The value of 'authority'.
      * @return This builder.
      */
    public com.nordstrom.event.secure.TokenizingValue.Builder setAuthority(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.authority = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'authority' field has been set.
      * The Fort Knox [authority](https://tokenize.prod.dots.vip.nordstrom.com/fortknox-grpc/) under which this token was created.
      * @return True if the 'authority' field has been set, false otherwise.
      */
    public boolean hasAuthority() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'authority' field.
      * The Fort Knox [authority](https://tokenize.prod.dots.vip.nordstrom.com/fortknox-grpc/) under which this token was created.
      * @return This builder.
      */
    public com.nordstrom.event.secure.TokenizingValue.Builder clearAuthority() {
      authority = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'strategy' field.
      * The Fort Knox [strategy](https://tokenize.prod.dots.vip.nordstrom.com/fortknox-grpc/strategies) used to govern the format of this token when it was created.
      * @return The value.
      */
    public java.lang.CharSequence getStrategy() {
      return strategy;
    }


    /**
      * Sets the value of the 'strategy' field.
      * The Fort Knox [strategy](https://tokenize.prod.dots.vip.nordstrom.com/fortknox-grpc/strategies) used to govern the format of this token when it was created.
      * @param value The value of 'strategy'.
      * @return This builder.
      */
    public com.nordstrom.event.secure.TokenizingValue.Builder setStrategy(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.strategy = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'strategy' field has been set.
      * The Fort Knox [strategy](https://tokenize.prod.dots.vip.nordstrom.com/fortknox-grpc/strategies) used to govern the format of this token when it was created.
      * @return True if the 'strategy' field has been set, false otherwise.
      */
    public boolean hasStrategy() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'strategy' field.
      * The Fort Knox [strategy](https://tokenize.prod.dots.vip.nordstrom.com/fortknox-grpc/strategies) used to govern the format of this token when it was created.
      * @return This builder.
      */
    public com.nordstrom.event.secure.TokenizingValue.Builder clearStrategy() {
      strategy = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'dataClassification' field.
      * Security classification of this value at the time it is tokenized.
      * @return The value.
      */
    public com.nordstrom.event.secure.DataClassification getDataClassification() {
      return dataClassification;
    }


    /**
      * Sets the value of the 'dataClassification' field.
      * Security classification of this value at the time it is tokenized.
      * @param value The value of 'dataClassification'.
      * @return This builder.
      */
    public com.nordstrom.event.secure.TokenizingValue.Builder setDataClassification(com.nordstrom.event.secure.DataClassification value) {
      validate(fields()[3], value);
      this.dataClassification = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'dataClassification' field has been set.
      * Security classification of this value at the time it is tokenized.
      * @return True if the 'dataClassification' field has been set, false otherwise.
      */
    public boolean hasDataClassification() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'dataClassification' field.
      * Security classification of this value at the time it is tokenized.
      * @return This builder.
      */
    public com.nordstrom.event.secure.TokenizingValue.Builder clearDataClassification() {
      dataClassification = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TokenizingValue build() {
      try {
        TokenizingValue record = new TokenizingValue();
        record.value = fieldSetFlags()[0] ? this.value : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.authority = fieldSetFlags()[1] ? this.authority : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.strategy = fieldSetFlags()[2] ? this.strategy : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.dataClassification = fieldSetFlags()[3] ? this.dataClassification : (com.nordstrom.event.secure.DataClassification) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TokenizingValue>
    WRITER$ = (org.apache.avro.io.DatumWriter<TokenizingValue>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TokenizingValue>
    READER$ = (org.apache.avro.io.DatumReader<TokenizingValue>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.value);

    out.writeString(this.authority);

    out.writeString(this.strategy);

    out.writeEnum(this.dataClassification.ordinal());

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.value = in.readString(this.value instanceof Utf8 ? (Utf8)this.value : null);

      this.authority = in.readString(this.authority instanceof Utf8 ? (Utf8)this.authority : null);

      this.strategy = in.readString(this.strategy instanceof Utf8 ? (Utf8)this.strategy : null);

      this.dataClassification = com.nordstrom.event.secure.DataClassification.values()[in.readEnum()];

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.value = in.readString(this.value instanceof Utf8 ? (Utf8)this.value : null);
          break;

        case 1:
          this.authority = in.readString(this.authority instanceof Utf8 ? (Utf8)this.authority : null);
          break;

        case 2:
          this.strategy = in.readString(this.strategy instanceof Utf8 ? (Utf8)this.strategy : null);
          break;

        case 3:
          this.dataClassification = com.nordstrom.event.secure.DataClassification.values()[in.readEnum()];
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










