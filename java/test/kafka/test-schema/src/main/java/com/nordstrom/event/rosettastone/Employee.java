/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.nordstrom.event.rosettastone;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Information to identify an employee */
@org.apache.avro.specific.AvroGenerated
public class Employee extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1546953854478322650L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Employee\",\"namespace\":\"com.nordstrom.event.rosettastone\",\"doc\":\"Information to identify an employee\",\"fields\":[{\"name\":\"idType\",\"type\":{\"type\":\"enum\",\"name\":\"EmployeeIdType\",\"doc\":\"Employee Id type identifier enum\\r\\n\\r\\n  * UNKNOWN : Default value for when reader doesn't recognize the value\\r\\n  * EMPLOYEE_NUMBER : Employee number\\r\\n  * EMPLOYEE_EMAIL : Employee email address (Not employee's personal email)\",\"symbols\":[\"UNKNOWN\",\"EMPLOYEE_NUMBER\",\"EMPLOYEE_EMAIL\"],\"default\":\"UNKNOWN\"},\"doc\":\"Type of Employee Id\"},{\"name\":\"id\",\"type\":\"string\",\"doc\":\"Identifier of an employee based on chosen EmployeeIdType\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Employee> ENCODER =
      new BinaryMessageEncoder<Employee>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Employee> DECODER =
      new BinaryMessageDecoder<Employee>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Employee> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Employee> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Employee> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Employee>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Employee to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Employee from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Employee instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Employee fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Type of Employee Id */
   private com.nordstrom.event.rosettastone.EmployeeIdType idType;
  /** Identifier of an employee based on chosen EmployeeIdType */
   private java.lang.CharSequence id;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Employee() {}

  /**
   * All-args constructor.
   * @param idType Type of Employee Id
   * @param id Identifier of an employee based on chosen EmployeeIdType
   */
  public Employee(com.nordstrom.event.rosettastone.EmployeeIdType idType, java.lang.CharSequence id) {
    this.idType = idType;
    this.id = id;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return idType;
    case 1: return id;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: idType = (com.nordstrom.event.rosettastone.EmployeeIdType)value$; break;
    case 1: id = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'idType' field.
   * @return Type of Employee Id
   */
  public com.nordstrom.event.rosettastone.EmployeeIdType getIdType() {
    return idType;
  }


  /**
   * Sets the value of the 'idType' field.
   * Type of Employee Id
   * @param value the value to set.
   */
  public void setIdType(com.nordstrom.event.rosettastone.EmployeeIdType value) {
    this.idType = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return Identifier of an employee based on chosen EmployeeIdType
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * Identifier of an employee based on chosen EmployeeIdType
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Creates a new Employee RecordBuilder.
   * @return A new Employee RecordBuilder
   */
  public static com.nordstrom.event.rosettastone.Employee.Builder newBuilder() {
    return new com.nordstrom.event.rosettastone.Employee.Builder();
  }

  /**
   * Creates a new Employee RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Employee RecordBuilder
   */
  public static com.nordstrom.event.rosettastone.Employee.Builder newBuilder(com.nordstrom.event.rosettastone.Employee.Builder other) {
    if (other == null) {
      return new com.nordstrom.event.rosettastone.Employee.Builder();
    } else {
      return new com.nordstrom.event.rosettastone.Employee.Builder(other);
    }
  }

  /**
   * Creates a new Employee RecordBuilder by copying an existing Employee instance.
   * @param other The existing instance to copy.
   * @return A new Employee RecordBuilder
   */
  public static com.nordstrom.event.rosettastone.Employee.Builder newBuilder(com.nordstrom.event.rosettastone.Employee other) {
    if (other == null) {
      return new com.nordstrom.event.rosettastone.Employee.Builder();
    } else {
      return new com.nordstrom.event.rosettastone.Employee.Builder(other);
    }
  }

  /**
   * RecordBuilder for Employee instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Employee>
    implements org.apache.avro.data.RecordBuilder<Employee> {

    /** Type of Employee Id */
    private com.nordstrom.event.rosettastone.EmployeeIdType idType;
    /** Identifier of an employee based on chosen EmployeeIdType */
    private java.lang.CharSequence id;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.nordstrom.event.rosettastone.Employee.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.idType)) {
        this.idType = data().deepCopy(fields()[0].schema(), other.idType);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing Employee instance
     * @param other The existing instance to copy.
     */
    private Builder(com.nordstrom.event.rosettastone.Employee other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.idType)) {
        this.idType = data().deepCopy(fields()[0].schema(), other.idType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'idType' field.
      * Type of Employee Id
      * @return The value.
      */
    public com.nordstrom.event.rosettastone.EmployeeIdType getIdType() {
      return idType;
    }


    /**
      * Sets the value of the 'idType' field.
      * Type of Employee Id
      * @param value The value of 'idType'.
      * @return This builder.
      */
    public com.nordstrom.event.rosettastone.Employee.Builder setIdType(com.nordstrom.event.rosettastone.EmployeeIdType value) {
      validate(fields()[0], value);
      this.idType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'idType' field has been set.
      * Type of Employee Id
      * @return True if the 'idType' field has been set, false otherwise.
      */
    public boolean hasIdType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'idType' field.
      * Type of Employee Id
      * @return This builder.
      */
    public com.nordstrom.event.rosettastone.Employee.Builder clearIdType() {
      idType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * Identifier of an employee based on chosen EmployeeIdType
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * Identifier of an employee based on chosen EmployeeIdType
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.nordstrom.event.rosettastone.Employee.Builder setId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * Identifier of an employee based on chosen EmployeeIdType
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'id' field.
      * Identifier of an employee based on chosen EmployeeIdType
      * @return This builder.
      */
    public com.nordstrom.event.rosettastone.Employee.Builder clearId() {
      id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Employee build() {
      try {
        Employee record = new Employee();
        record.idType = fieldSetFlags()[0] ? this.idType : (com.nordstrom.event.rosettastone.EmployeeIdType) defaultValue(fields()[0]);
        record.id = fieldSetFlags()[1] ? this.id : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Employee>
    WRITER$ = (org.apache.avro.io.DatumWriter<Employee>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Employee>
    READER$ = (org.apache.avro.io.DatumReader<Employee>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeEnum(this.idType.ordinal());

    out.writeString(this.id);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.idType = com.nordstrom.event.rosettastone.EmployeeIdType.values()[in.readEnum()];

      this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.idType = com.nordstrom.event.rosettastone.EmployeeIdType.values()[in.readEnum()];
          break;

        case 1:
          this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










