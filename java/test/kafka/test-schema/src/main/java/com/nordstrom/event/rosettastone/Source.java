/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.nordstrom.event.rosettastone;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Note: There is a new version specific to customer data plane. See `standardized/Channel.avdl`.

    Information about the domain that produced the event.
    A domain is a self-contained application ecosystem that supports a foundational business function. */
@org.apache.avro.specific.AvroGenerated
public class Source extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 252638197114748806L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Source\",\"namespace\":\"com.nordstrom.event.rosettastone\",\"doc\":\"Note: There is a new version specific to customer data plane. See `standardized/Channel.avdl`.\\r\\n\\r\\n    Information about the domain that produced the event.\\r\\n    A domain is a self-contained application ecosystem that supports a foundational business function.\",\"fields\":[{\"name\":\"channelCountry\",\"type\":{\"type\":\"enum\",\"name\":\"CountryCode\",\"namespace\":\"com.nordstrom.event.common\",\"doc\":\"Country Codes represented in [ISO 3166-2 alpha-2 format](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\\r\\n\\r\\n    Note: Producers must map Transitionally Reserved codes in the above standards to their respective officially assigned codes.\\r\\n\\r\\n  * AD : Andorra\\r\\n  * AE : United Arab Emirates\\r\\n  * AF : Afghanistan\\r\\n  * AG : Antigua and Barbuda\\r\\n  * AI : Anguilla\\r\\n  * AL : Albania\\r\\n  * AM : Armenia\\r\\n  * AO : Angola\\r\\n  * AQ : Antarctica\\r\\n  * AR : Argentina\\r\\n  * AS : American Samoa\\r\\n  * AT : Austria\\r\\n  * AU : Australia\\r\\n  * AW : Aruba\\r\\n  * AX : Aland Islands\\r\\n  * AZ : Azerbaijan\\r\\n  * BA : Bosnia and Herzegovina\\r\\n  * BB : Barbados\\r\\n  * BD : Bangladesh\\r\\n  * BE : Belgium\\r\\n  * BF : Burkina Faso\\r\\n  * BG : Bulgaria\\r\\n  * BH : Bahrain\\r\\n  * BI : Burundi\\r\\n  * BJ : Benin\\r\\n  * BL : Saint Barthelemy\\r\\n  * BM : Bermuda\\r\\n  * BN : Brunei Darussalam\\r\\n  * BO : Bolivia (Plurinational State of)\\r\\n  * BQ : Bonaire, Sint Eustatius and Saba\\r\\n  * BR : Brazil\\r\\n  * BS : Bahamas\\r\\n  * BT : Bhutan\\r\\n  * BV : Bouvet Island\\r\\n  * BW : Botswana\\r\\n  * BY : Belarus\\r\\n  * BZ : Belize\\r\\n  * CA : Canada\\r\\n  * CC : Cocos (Keeling) Islands\\r\\n  * CD : Congo, Democratic Republic of the\\r\\n  * CF : Central African Republic\\r\\n  * CG : Congo\\r\\n  * CH : Switzerland\\r\\n  * CI : Cote d'Ivoire\\r\\n  * CK : Cook Islands\\r\\n  * CL : Chile\\r\\n  * CM : Cameroon\\r\\n  * CN : China\\r\\n  * CO : Colombia\\r\\n  * CR : Costa Rica\\r\\n  * CU : Cuba\\r\\n  * CV : Cabo Verde\\r\\n  * CW : Curacao\\r\\n  * CX : Christmas Island\\r\\n  * CY : Cyprus\\r\\n  * CZ : Czechia\\r\\n  * DE : Germany\\r\\n  * DJ : Djibouti\\r\\n  * DK : Denmark\\r\\n  * DM : Dominica\\r\\n  * DO : Dominican Republic\\r\\n  * DZ : Algeria\\r\\n  * EC : Ecuador\\r\\n  * EE : Estonia\\r\\n  * EG : Egypt\\r\\n  * EH : Western Sahara\\r\\n  * ER : Eritrea\\r\\n  * ES : Spain\\r\\n  * ET : Ethiopia\\r\\n  * FI : Finland\\r\\n  * FJ : Fiji\\r\\n  * FK : Falkland Islands (Malvinas)\\r\\n  * FM : Micronesia (Federated States of)\\r\\n  * FO : Faroe Islands\\r\\n  * FR : France\\r\\n  * GA : Gabon\\r\\n  * GB : United Kingdom of Great Britain and Northern Ireland\\r\\n  * GD : Grenada\\r\\n  * GE : Georgia\\r\\n  * GF : French Guiana\\r\\n  * GG : Guernsey\\r\\n  * GH : Ghana\\r\\n  * GI : Gibraltar\\r\\n  * GL : Greenland\\r\\n  * GM : Gambia\\r\\n  * GN : Guinea\\r\\n  * GP : Guadeloupe\\r\\n  * GQ : Equatorial Guinea\\r\\n  * GR : Greece\\r\\n  * GS : South Georgia and the South Sandwich Islands\\r\\n  * GT : Guatemala\\r\\n  * GU : Guam\\r\\n  * GW : Guinea-Bissau\\r\\n  * GY : Guyana\\r\\n  * HK : Hong Kong\\r\\n  * HM : Heard Island and McDonald Islands\\r\\n  * HN : Honduras\\r\\n  * HR : Croatia\\r\\n  * HT : Haiti\\r\\n  * HU : Hungary\\r\\n  * ID : Indonesia\\r\\n  * IE : Ireland\\r\\n  * IL : Israel\\r\\n  * IM : Isle of Man\\r\\n  * IN : India\\r\\n  * IO : British Indian Ocean Territory\\r\\n  * IQ : Iraq\\r\\n  * IR : Iran (Islamic Republic of)\\r\\n  * IS : Iceland\\r\\n  * IT : Italy\\r\\n  * JE : Jersey\\r\\n  * JM : Jamaica\\r\\n  * JO : Jordan\\r\\n  * JP : Japan\\r\\n  * KE : Kenya\\r\\n  * KG : Kyrgyzstan\\r\\n  * KH : Cambodia\\r\\n  * KI : Kiribati\\r\\n  * KM : Comoros\\r\\n  * KN : Saint Kitts and Nevis\\r\\n  * KP : Korea (Democratic People's Republic of)\\r\\n  * KR : Korea, Republic of\\r\\n  * KW : Kuwait\\r\\n  * KY : Cayman Islands\\r\\n  * KZ : Kazakhstan\\r\\n  * LA : Lao People's Democratic Republic\\r\\n  * LB : Lebanon\\r\\n  * LC : Saint Lucia\\r\\n  * LI : Liechtenstein\\r\\n  * LK : Sri Lanka\\r\\n  * LR : Liberia\\r\\n  * LS : Lesotho\\r\\n  * LT : Lithuania\\r\\n  * LU : Luxembourg\\r\\n  * LV : Latvia\\r\\n  * LY : Libya\\r\\n  * MA : Morocco\\r\\n  * MC : Monaco\\r\\n  * MD : Moldova, Republic of\\r\\n  * ME : Montenegro\\r\\n  * MF : Saint Martin (French part)\\r\\n  * MG : Madagascar\\r\\n  * MH : Marshall Islands\\r\\n  * MK : North Macedonia\\r\\n  * ML : Mali\\r\\n  * MM : Myanmar\\r\\n  * MN : Mongolia\\r\\n  * MO : Macao\\r\\n  * MP : Northern Mariana Islands\\r\\n  * MQ : Martinique\\r\\n  * MR : Mauritania\\r\\n  * MS : Montserrat\\r\\n  * MT : Malta\\r\\n  * MU : Mauritius\\r\\n  * MV : Maldives\\r\\n  * MW : Malawi\\r\\n  * MX : Mexico\\r\\n  * MY : Malaysia\\r\\n  * MZ : Mozambique\\r\\n  * NA : Namibia\\r\\n  * NC : New Caledonia\\r\\n  * NE : Niger\\r\\n  * NF : Norfolk Island\\r\\n  * NG : Nigeria\\r\\n  * NI : Nicaragua\\r\\n  * NL : Netherlands\\r\\n  * NO : Norway\\r\\n  * NP : Nepal\\r\\n  * NR : Nauru\\r\\n  * NU : Niue\\r\\n  * NZ : New Zealand\\r\\n  * OM : Oman\\r\\n  * PA : Panama\\r\\n  * PE : Peru\\r\\n  * PF : French Polynesia\\r\\n  * PG : Papua New Guinea\\r\\n  * PH : Philippines\\r\\n  * PK : Pakistan\\r\\n  * PL : Poland\\r\\n  * PM : Saint Pierre and Miquelon\\r\\n  * PN : Pitcairn\\r\\n  * PR : Puerto Rico\\r\\n  * PS : Palestine, State of\\r\\n  * PT : Portugal\\r\\n  * PW : Palau\\r\\n  * PY : Paraguay\\r\\n  * QA : Qatar\\r\\n  * RE : Reunion\\r\\n  * RO : Romania\\r\\n  * RS : Serbia\\r\\n  * RU : Russian Federation\\r\\n  * RW : Rwanda\\r\\n  * SA : Saudi Arabia\\r\\n  * SB : Solomon Islands\\r\\n  * SC : Seychelles\\r\\n  * SD : Sudan\\r\\n  * SE : Sweden\\r\\n  * SG : Singapore\\r\\n  * SH : Saint Helena, Ascension and Tristan da Cunha\\r\\n  * SI : Slovenia\\r\\n  * SJ : Svalbard and Jan Mayen\\r\\n  * SK : Slovakia\\r\\n  * SL : Sierra Leone\\r\\n  * SM : San Marino\\r\\n  * SN : Senegal\\r\\n  * SO : Somalia\\r\\n  * SR : Suriname\\r\\n  * SS : South Sudan\\r\\n  * ST : Sao Tome and Principe\\r\\n  * SV : El Salvador\\r\\n  * SX : Sint Maarten (Dutch part)\\r\\n  * SY : Syrian Arab Republic\\r\\n  * SZ : Eswatini\\r\\n  * TC : Turks and Caicos Islands\\r\\n  * TD : Chad\\r\\n  * TF : French Southern Territories\\r\\n  * TG : Togo\\r\\n  * TH : Thailand\\r\\n  * TJ : Tajikistan\\r\\n  * TK : Tokelau\\r\\n  * TL : Timor-Leste\\r\\n  * TM : Turkmenistan\\r\\n  * TN : Tunisia\\r\\n  * TO : Tonga\\r\\n  * TR : Turkey\\r\\n  * TT : Trinidad and Tobago\\r\\n  * TV : Tuvalu\\r\\n  * TW : Taiwan, Province of China\\r\\n  * TZ : Tanzania, United Republic of\\r\\n  * UA : Ukraine\\r\\n  * UG : Uganda\\r\\n  * UM : United States Minor Outlying Islands\\r\\n  * US : United States of America\\r\\n  * UY : Uruguay\\r\\n  * UZ : Uzbekistan\\r\\n  * VA : Holy See\\r\\n  * VC : Saint Vincent and the Grenadines\\r\\n  * VE : Venezuela (Bolivarian Republic of)\\r\\n  * VG : Virgin Islands (British)\\r\\n  * VI : Virgin Islands (U.S.)\\r\\n  * VN : Viet Nam\\r\\n  * VU : Vanuatu\\r\\n  * WF : Wallis and Futuna\\r\\n  * WS : Samoa\\r\\n  * YE : Yemen\\r\\n  * YT : Mayotte\\r\\n  * ZA : South Africa\\r\\n  * ZM : Zambia\\r\\n  * ZW : Zimbabwe\",\"symbols\":[\"AD\",\"AE\",\"AF\",\"AG\",\"AI\",\"AL\",\"AM\",\"AO\",\"AQ\",\"AR\",\"AS\",\"AT\",\"AU\",\"AW\",\"AX\",\"AZ\",\"BA\",\"BB\",\"BD\",\"BE\",\"BF\",\"BG\",\"BH\",\"BI\",\"BJ\",\"BL\",\"BM\",\"BN\",\"BO\",\"BQ\",\"BR\",\"BS\",\"BT\",\"BV\",\"BW\",\"BY\",\"BZ\",\"CA\",\"CC\",\"CD\",\"CF\",\"CG\",\"CH\",\"CI\",\"CK\",\"CL\",\"CM\",\"CN\",\"CO\",\"CR\",\"CU\",\"CV\",\"CW\",\"CX\",\"CY\",\"CZ\",\"DE\",\"DJ\",\"DK\",\"DM\",\"DO\",\"DZ\",\"EC\",\"EE\",\"EG\",\"EH\",\"ER\",\"ES\",\"ET\",\"FI\",\"FJ\",\"FK\",\"FM\",\"FO\",\"FR\",\"GA\",\"GB\",\"GD\",\"GE\",\"GF\",\"GG\",\"GH\",\"GI\",\"GL\",\"GM\",\"GN\",\"GP\",\"GQ\",\"GR\",\"GS\",\"GT\",\"GU\",\"GW\",\"GY\",\"HK\",\"HM\",\"HN\",\"HR\",\"HT\",\"HU\",\"ID\",\"IE\",\"IL\",\"IM\",\"IN\",\"IO\",\"IQ\",\"IR\",\"IS\",\"IT\",\"JE\",\"JM\",\"JO\",\"JP\",\"KE\",\"KG\",\"KH\",\"KI\",\"KM\",\"KN\",\"KP\",\"KR\",\"KW\",\"KY\",\"KZ\",\"LA\",\"LB\",\"LC\",\"LI\",\"LK\",\"LR\",\"LS\",\"LT\",\"LU\",\"LV\",\"LY\",\"MA\",\"MC\",\"MD\",\"ME\",\"MF\",\"MG\",\"MH\",\"MK\",\"ML\",\"MM\",\"MN\",\"MO\",\"MP\",\"MQ\",\"MR\",\"MS\",\"MT\",\"MU\",\"MV\",\"MW\",\"MX\",\"MY\",\"MZ\",\"NA\",\"NC\",\"NE\",\"NF\",\"NG\",\"NI\",\"NL\",\"NO\",\"NP\",\"NR\",\"NU\",\"NZ\",\"OM\",\"PA\",\"PE\",\"PF\",\"PG\",\"PH\",\"PK\",\"PL\",\"PM\",\"PN\",\"PR\",\"PS\",\"PT\",\"PW\",\"PY\",\"QA\",\"RE\",\"RO\",\"RS\",\"RU\",\"RW\",\"SA\",\"SB\",\"SC\",\"SD\",\"SE\",\"SG\",\"SH\",\"SI\",\"SJ\",\"SK\",\"SL\",\"SM\",\"SN\",\"SO\",\"SR\",\"SS\",\"ST\",\"SV\",\"SX\",\"SY\",\"SZ\",\"TC\",\"TD\",\"TF\",\"TG\",\"TH\",\"TJ\",\"TK\",\"TL\",\"TM\",\"TN\",\"TO\",\"TR\",\"TT\",\"TV\",\"TW\",\"TZ\",\"UA\",\"UG\",\"UM\",\"US\",\"UY\",\"UZ\",\"VA\",\"VC\",\"VE\",\"VG\",\"VI\",\"VN\",\"VU\",\"WF\",\"WS\",\"YE\",\"YT\",\"ZA\",\"ZM\",\"ZW\"]},\"doc\":\"Country code associated with the domain producing the event.\\r\\n      Together with Channel and Platform give a complete picture of from wh","ere the event originated.\\r\\n      Should be US or CA.\\r\\n      Represented in [ISO 3166-2 alpha-2 format](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\"},{\"name\":\"channel\",\"type\":{\"type\":\"enum\",\"name\":\"Channel\",\"doc\":\"Channel is an identifier enum that represents the part of the Nordstrom family of businesses\\r\\n    the app, website, or other source is affiliated with.\\r\\n    If a new channel is added, the producer must version this schema.\\r\\n\\r\\n  * UNKNOWN : Default value for when reader doesn't recognize the value\\r\\n  * OMNI: Omni-market meaning all channels.  Should only be used if there is no differentiation at all between the code-paths and experience regardless of channel.\\r\\n  * FULL_LINE: Full price selling stores, local and digital experiences\\r\\n  * RACK: Nordstrom Rack physical and digital experiences\\r\\n  * HAUTELOOK: HauteLook\\r\\n  * TRUNKCLUB: Trunk Club physical and digital experiences\\r\\n  * CASHSTAR : CashStar\\r\\n  * EXTERNAL : Outside of Nordstrom channels\",\"symbols\":[\"UNKNOWN\",\"OMNI\",\"FULL_LINE\",\"RACK\",\"HAUTELOOK\",\"TRUNKCLUB\",\"CASHSTAR\",\"EXTERNAL\"],\"default\":\"UNKNOWN\"},\"doc\":\"Associated major business channel of the producing domain.\\r\\n      This is used to differentiate between full line, rack, haute look, trunk club - our major channels.\\r\\n      The channel country attribute is used to further distinguish USA vs CAN channels.\"},{\"name\":\"platform\",\"type\":{\"type\":\"enum\",\"name\":\"Platform\",\"doc\":\"Platform is an identifier enum that represents the base technology platform\\r\\n    solution the customer is using when the event occurs.\\r\\n    If a new platfrom is added, the producer must version this schema.\\r\\n\\r\\n  * UNKNOWN : Default value for when reader doesn't recognize the value\\r\\n  * WEB : Example: Desktop experience of Nordstrom.com\\r\\n  * MOW : Mobile on Web Example: Mobile experience of Nordstrom.com\\r\\n  * IOS : Customer Mobile App on iOS\\r\\n  * ANDROID : Customer Mobile App on Android\\r\\n  * POS : Point of Sale register or device\\r\\n  * IN_STORE_DIGITAL: digitally powered experiences in physical stores. Example: Fitting Room Button Application\\r\\n  * CSR_STORE : Customer service representative at store or local\\r\\n  * CSR_APP : Customer service representative through employee apps\\r\\n  * CSR_PHONE : Customer service representative over phone\\r\\n  * BACKEND_SERVICE : Backend system/service. DO NOT use when original decision or action came from a customer\\r\\n  * RPOS: Restaurant Point of Sale register or device\\r\\n  * THIRD_PARTY_VENDOR : External vendor. (e.g. Borderfree)\",\"symbols\":[\"UNKNOWN\",\"WEB\",\"MOW\",\"IOS\",\"ANDROID\",\"POS\",\"IN_STORE_DIGITAL\",\"CSR_STORE\",\"CSR_APP\",\"CSR_PHONE\",\"BACKEND_SERVICE\",\"RPOS\",\"THIRD_PARTY_VENDOR\"],\"default\":\"UNKNOWN\"},\"doc\":\"Platform of the producing domain.\\r\\n      This is used to understand which technical platform the event was sourced from.\\r\\n      Examples would be point of sale versus iOS versus web.\\r\\n      Events sourced from a web browser on an iOS or android device should use web.\"},{\"name\":\"feature\",\"type\":[\"null\",\"string\"],\"doc\":\"(Optional) Specific feature associated with this event from the producing domain.\\r\\n      As this is an open string, it is up to feature teams to manage and maintain data quality of these fields.\\r\\n      Examples: PDP, Looks mini-PDP, recommendations, purchase history, etc...\",\"default\":null},{\"name\":\"serviceName\",\"type\":[\"null\",\"string\"],\"doc\":\"(Optional) Name of the domain that produced the event.\\r\\n      Most likely this would be paired with an events source with a platform value of backend service to distinguish the service or service team. (Optional)\\r\\n      Examples: OMS: When OMS cancelled an order based on inventory shortage.\\r\\n      Incorrect usage; DO NOT use when original decision or action came from a customer\\r\\n      but the event was published by a backend service. Example, add to cart published by Checkout API.\",\"default\":null},{\"name\":\"store\",\"type\":[\"null\",\"string\"],\"doc\":\"(Optional) Physical store number.\\r\\n      MUST not be used for digital sales.\\r\\n      Wherever possible we'd like to move away from overloading store number and call out the actual source of the event using channel, channel country, platform, feature, and service name.\",\"default\":null},{\"name\":\"register\",\"type\":[\"null\",\"string\"],\"doc\":\"(Optional) POS register number in a physical store.\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Source> ENCODER =
      new BinaryMessageEncoder<Source>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Source> DECODER =
      new BinaryMessageDecoder<Source>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Source> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Source> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Source> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Source>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Source to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Source from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Source instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Source fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Country code associated with the domain producing the event.
      Together with Channel and Platform give a complete picture of from where the event originated.
      Should be US or CA.
      Represented in [ISO 3166-2 alpha-2 format](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) */
   private com.nordstrom.event.common.CountryCode channelCountry;
  /** Associated major business channel of the producing domain.
      This is used to differentiate between full line, rack, haute look, trunk club - our major channels.
      The channel country attribute is used to further distinguish USA vs CAN channels. */
   private com.nordstrom.event.rosettastone.Channel channel;
  /** Platform of the producing domain.
      This is used to understand which technical platform the event was sourced from.
      Examples would be point of sale versus iOS versus web.
      Events sourced from a web browser on an iOS or android device should use web. */
   private com.nordstrom.event.rosettastone.Platform platform;
  /** (Optional) Specific feature associated with this event from the producing domain.
      As this is an open string, it is up to feature teams to manage and maintain data quality of these fields.
      Examples: PDP, Looks mini-PDP, recommendations, purchase history, etc... */
   private java.lang.CharSequence feature;
  /** (Optional) Name of the domain that produced the event.
      Most likely this would be paired with an events source with a platform value of backend service to distinguish the service or service team. (Optional)
      Examples: OMS: When OMS cancelled an order based on inventory shortage.
      Incorrect usage; DO NOT use when original decision or action came from a customer
      but the event was published by a backend service. Example, add to cart published by Checkout API. */
   private java.lang.CharSequence serviceName;
  /** (Optional) Physical store number.
      MUST not be used for digital sales.
      Wherever possible we'd like to move away from overloading store number and call out the actual source of the event using channel, channel country, platform, feature, and service name. */
   private java.lang.CharSequence store;
  /** (Optional) POS register number in a physical store. */
   private java.lang.CharSequence register;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Source() {}

  /**
   * All-args constructor.
   * @param channelCountry Country code associated with the domain producing the event.
      Together with Channel and Platform give a complete picture of from where the event originated.
      Should be US or CA.
      Represented in [ISO 3166-2 alpha-2 format](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
   * @param channel Associated major business channel of the producing domain.
      This is used to differentiate between full line, rack, haute look, trunk club - our major channels.
      The channel country attribute is used to further distinguish USA vs CAN channels.
   * @param platform Platform of the producing domain.
      This is used to understand which technical platform the event was sourced from.
      Examples would be point of sale versus iOS versus web.
      Events sourced from a web browser on an iOS or android device should use web.
   * @param feature (Optional) Specific feature associated with this event from the producing domain.
      As this is an open string, it is up to feature teams to manage and maintain data quality of these fields.
      Examples: PDP, Looks mini-PDP, recommendations, purchase history, etc...
   * @param serviceName (Optional) Name of the domain that produced the event.
      Most likely this would be paired with an events source with a platform value of backend service to distinguish the service or service team. (Optional)
      Examples: OMS: When OMS cancelled an order based on inventory shortage.
      Incorrect usage; DO NOT use when original decision or action came from a customer
      but the event was published by a backend service. Example, add to cart published by Checkout API.
   * @param store (Optional) Physical store number.
      MUST not be used for digital sales.
      Wherever possible we'd like to move away from overloading store number and call out the actual source of the event using channel, channel country, platform, feature, and service name.
   * @param register (Optional) POS register number in a physical store.
   */
  public Source(com.nordstrom.event.common.CountryCode channelCountry, com.nordstrom.event.rosettastone.Channel channel, com.nordstrom.event.rosettastone.Platform platform, java.lang.CharSequence feature, java.lang.CharSequence serviceName, java.lang.CharSequence store, java.lang.CharSequence register) {
    this.channelCountry = channelCountry;
    this.channel = channel;
    this.platform = platform;
    this.feature = feature;
    this.serviceName = serviceName;
    this.store = store;
    this.register = register;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return channelCountry;
    case 1: return channel;
    case 2: return platform;
    case 3: return feature;
    case 4: return serviceName;
    case 5: return store;
    case 6: return register;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: channelCountry = (com.nordstrom.event.common.CountryCode)value$; break;
    case 1: channel = (com.nordstrom.event.rosettastone.Channel)value$; break;
    case 2: platform = (com.nordstrom.event.rosettastone.Platform)value$; break;
    case 3: feature = (java.lang.CharSequence)value$; break;
    case 4: serviceName = (java.lang.CharSequence)value$; break;
    case 5: store = (java.lang.CharSequence)value$; break;
    case 6: register = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'channelCountry' field.
   * @return Country code associated with the domain producing the event.
      Together with Channel and Platform give a complete picture of from where the event originated.
      Should be US or CA.
      Represented in [ISO 3166-2 alpha-2 format](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
   */
  public com.nordstrom.event.common.CountryCode getChannelCountry() {
    return channelCountry;
  }


  /**
   * Sets the value of the 'channelCountry' field.
   * Country code associated with the domain producing the event.
      Together with Channel and Platform give a complete picture of from where the event originated.
      Should be US or CA.
      Represented in [ISO 3166-2 alpha-2 format](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
   * @param value the value to set.
   */
  public void setChannelCountry(com.nordstrom.event.common.CountryCode value) {
    this.channelCountry = value;
  }

  /**
   * Gets the value of the 'channel' field.
   * @return Associated major business channel of the producing domain.
      This is used to differentiate between full line, rack, haute look, trunk club - our major channels.
      The channel country attribute is used to further distinguish USA vs CAN channels.
   */
  public com.nordstrom.event.rosettastone.Channel getChannel() {
    return channel;
  }


  /**
   * Sets the value of the 'channel' field.
   * Associated major business channel of the producing domain.
      This is used to differentiate between full line, rack, haute look, trunk club - our major channels.
      The channel country attribute is used to further distinguish USA vs CAN channels.
   * @param value the value to set.
   */
  public void setChannel(com.nordstrom.event.rosettastone.Channel value) {
    this.channel = value;
  }

  /**
   * Gets the value of the 'platform' field.
   * @return Platform of the producing domain.
      This is used to understand which technical platform the event was sourced from.
      Examples would be point of sale versus iOS versus web.
      Events sourced from a web browser on an iOS or android device should use web.
   */
  public com.nordstrom.event.rosettastone.Platform getPlatform() {
    return platform;
  }


  /**
   * Sets the value of the 'platform' field.
   * Platform of the producing domain.
      This is used to understand which technical platform the event was sourced from.
      Examples would be point of sale versus iOS versus web.
      Events sourced from a web browser on an iOS or android device should use web.
   * @param value the value to set.
   */
  public void setPlatform(com.nordstrom.event.rosettastone.Platform value) {
    this.platform = value;
  }

  /**
   * Gets the value of the 'feature' field.
   * @return (Optional) Specific feature associated with this event from the producing domain.
      As this is an open string, it is up to feature teams to manage and maintain data quality of these fields.
      Examples: PDP, Looks mini-PDP, recommendations, purchase history, etc...
   */
  public java.lang.CharSequence getFeature() {
    return feature;
  }


  /**
   * Sets the value of the 'feature' field.
   * (Optional) Specific feature associated with this event from the producing domain.
      As this is an open string, it is up to feature teams to manage and maintain data quality of these fields.
      Examples: PDP, Looks mini-PDP, recommendations, purchase history, etc...
   * @param value the value to set.
   */
  public void setFeature(java.lang.CharSequence value) {
    this.feature = value;
  }

  /**
   * Gets the value of the 'serviceName' field.
   * @return (Optional) Name of the domain that produced the event.
      Most likely this would be paired with an events source with a platform value of backend service to distinguish the service or service team. (Optional)
      Examples: OMS: When OMS cancelled an order based on inventory shortage.
      Incorrect usage; DO NOT use when original decision or action came from a customer
      but the event was published by a backend service. Example, add to cart published by Checkout API.
   */
  public java.lang.CharSequence getServiceName() {
    return serviceName;
  }


  /**
   * Sets the value of the 'serviceName' field.
   * (Optional) Name of the domain that produced the event.
      Most likely this would be paired with an events source with a platform value of backend service to distinguish the service or service team. (Optional)
      Examples: OMS: When OMS cancelled an order based on inventory shortage.
      Incorrect usage; DO NOT use when original decision or action came from a customer
      but the event was published by a backend service. Example, add to cart published by Checkout API.
   * @param value the value to set.
   */
  public void setServiceName(java.lang.CharSequence value) {
    this.serviceName = value;
  }

  /**
   * Gets the value of the 'store' field.
   * @return (Optional) Physical store number.
      MUST not be used for digital sales.
      Wherever possible we'd like to move away from overloading store number and call out the actual source of the event using channel, channel country, platform, feature, and service name.
   */
  public java.lang.CharSequence getStore() {
    return store;
  }


  /**
   * Sets the value of the 'store' field.
   * (Optional) Physical store number.
      MUST not be used for digital sales.
      Wherever possible we'd like to move away from overloading store number and call out the actual source of the event using channel, channel country, platform, feature, and service name.
   * @param value the value to set.
   */
  public void setStore(java.lang.CharSequence value) {
    this.store = value;
  }

  /**
   * Gets the value of the 'register' field.
   * @return (Optional) POS register number in a physical store.
   */
  public java.lang.CharSequence getRegister() {
    return register;
  }


  /**
   * Sets the value of the 'register' field.
   * (Optional) POS register number in a physical store.
   * @param value the value to set.
   */
  public void setRegister(java.lang.CharSequence value) {
    this.register = value;
  }

  /**
   * Creates a new Source RecordBuilder.
   * @return A new Source RecordBuilder
   */
  public static com.nordstrom.event.rosettastone.Source.Builder newBuilder() {
    return new com.nordstrom.event.rosettastone.Source.Builder();
  }

  /**
   * Creates a new Source RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Source RecordBuilder
   */
  public static com.nordstrom.event.rosettastone.Source.Builder newBuilder(com.nordstrom.event.rosettastone.Source.Builder other) {
    if (other == null) {
      return new com.nordstrom.event.rosettastone.Source.Builder();
    } else {
      return new com.nordstrom.event.rosettastone.Source.Builder(other);
    }
  }

  /**
   * Creates a new Source RecordBuilder by copying an existing Source instance.
   * @param other The existing instance to copy.
   * @return A new Source RecordBuilder
   */
  public static com.nordstrom.event.rosettastone.Source.Builder newBuilder(com.nordstrom.event.rosettastone.Source other) {
    if (other == null) {
      return new com.nordstrom.event.rosettastone.Source.Builder();
    } else {
      return new com.nordstrom.event.rosettastone.Source.Builder(other);
    }
  }

  /**
   * RecordBuilder for Source instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Source>
    implements org.apache.avro.data.RecordBuilder<Source> {

    /** Country code associated with the domain producing the event.
      Together with Channel and Platform give a complete picture of from where the event originated.
      Should be US or CA.
      Represented in [ISO 3166-2 alpha-2 format](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) */
    private com.nordstrom.event.common.CountryCode channelCountry;
    /** Associated major business channel of the producing domain.
      This is used to differentiate between full line, rack, haute look, trunk club - our major channels.
      The channel country attribute is used to further distinguish USA vs CAN channels. */
    private com.nordstrom.event.rosettastone.Channel channel;
    /** Platform of the producing domain.
      This is used to understand which technical platform the event was sourced from.
      Examples would be point of sale versus iOS versus web.
      Events sourced from a web browser on an iOS or android device should use web. */
    private com.nordstrom.event.rosettastone.Platform platform;
    /** (Optional) Specific feature associated with this event from the producing domain.
      As this is an open string, it is up to feature teams to manage and maintain data quality of these fields.
      Examples: PDP, Looks mini-PDP, recommendations, purchase history, etc... */
    private java.lang.CharSequence feature;
    /** (Optional) Name of the domain that produced the event.
      Most likely this would be paired with an events source with a platform value of backend service to distinguish the service or service team. (Optional)
      Examples: OMS: When OMS cancelled an order based on inventory shortage.
      Incorrect usage; DO NOT use when original decision or action came from a customer
      but the event was published by a backend service. Example, add to cart published by Checkout API. */
    private java.lang.CharSequence serviceName;
    /** (Optional) Physical store number.
      MUST not be used for digital sales.
      Wherever possible we'd like to move away from overloading store number and call out the actual source of the event using channel, channel country, platform, feature, and service name. */
    private java.lang.CharSequence store;
    /** (Optional) POS register number in a physical store. */
    private java.lang.CharSequence register;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.nordstrom.event.rosettastone.Source.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.channelCountry)) {
        this.channelCountry = data().deepCopy(fields()[0].schema(), other.channelCountry);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.channel)) {
        this.channel = data().deepCopy(fields()[1].schema(), other.channel);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.platform)) {
        this.platform = data().deepCopy(fields()[2].schema(), other.platform);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.feature)) {
        this.feature = data().deepCopy(fields()[3].schema(), other.feature);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.serviceName)) {
        this.serviceName = data().deepCopy(fields()[4].schema(), other.serviceName);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.store)) {
        this.store = data().deepCopy(fields()[5].schema(), other.store);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.register)) {
        this.register = data().deepCopy(fields()[6].schema(), other.register);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing Source instance
     * @param other The existing instance to copy.
     */
    private Builder(com.nordstrom.event.rosettastone.Source other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.channelCountry)) {
        this.channelCountry = data().deepCopy(fields()[0].schema(), other.channelCountry);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.channel)) {
        this.channel = data().deepCopy(fields()[1].schema(), other.channel);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.platform)) {
        this.platform = data().deepCopy(fields()[2].schema(), other.platform);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.feature)) {
        this.feature = data().deepCopy(fields()[3].schema(), other.feature);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.serviceName)) {
        this.serviceName = data().deepCopy(fields()[4].schema(), other.serviceName);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.store)) {
        this.store = data().deepCopy(fields()[5].schema(), other.store);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.register)) {
        this.register = data().deepCopy(fields()[6].schema(), other.register);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'channelCountry' field.
      * Country code associated with the domain producing the event.
      Together with Channel and Platform give a complete picture of from where the event originated.
      Should be US or CA.
      Represented in [ISO 3166-2 alpha-2 format](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
      * @return The value.
      */
    public com.nordstrom.event.common.CountryCode getChannelCountry() {
      return channelCountry;
    }


    /**
      * Sets the value of the 'channelCountry' field.
      * Country code associated with the domain producing the event.
      Together with Channel and Platform give a complete picture of from where the event originated.
      Should be US or CA.
      Represented in [ISO 3166-2 alpha-2 format](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
      * @param value The value of 'channelCountry'.
      * @return This builder.
      */
    public com.nordstrom.event.rosettastone.Source.Builder setChannelCountry(com.nordstrom.event.common.CountryCode value) {
      validate(fields()[0], value);
      this.channelCountry = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'channelCountry' field has been set.
      * Country code associated with the domain producing the event.
      Together with Channel and Platform give a complete picture of from where the event originated.
      Should be US or CA.
      Represented in [ISO 3166-2 alpha-2 format](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
      * @return True if the 'channelCountry' field has been set, false otherwise.
      */
    public boolean hasChannelCountry() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'channelCountry' field.
      * Country code associated with the domain producing the event.
      Together with Channel and Platform give a complete picture of from where the event originated.
      Should be US or CA.
      Represented in [ISO 3166-2 alpha-2 format](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
      * @return This builder.
      */
    public com.nordstrom.event.rosettastone.Source.Builder clearChannelCountry() {
      channelCountry = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'channel' field.
      * Associated major business channel of the producing domain.
      This is used to differentiate between full line, rack, haute look, trunk club - our major channels.
      The channel country attribute is used to further distinguish USA vs CAN channels.
      * @return The value.
      */
    public com.nordstrom.event.rosettastone.Channel getChannel() {
      return channel;
    }


    /**
      * Sets the value of the 'channel' field.
      * Associated major business channel of the producing domain.
      This is used to differentiate between full line, rack, haute look, trunk club - our major channels.
      The channel country attribute is used to further distinguish USA vs CAN channels.
      * @param value The value of 'channel'.
      * @return This builder.
      */
    public com.nordstrom.event.rosettastone.Source.Builder setChannel(com.nordstrom.event.rosettastone.Channel value) {
      validate(fields()[1], value);
      this.channel = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'channel' field has been set.
      * Associated major business channel of the producing domain.
      This is used to differentiate between full line, rack, haute look, trunk club - our major channels.
      The channel country attribute is used to further distinguish USA vs CAN channels.
      * @return True if the 'channel' field has been set, false otherwise.
      */
    public boolean hasChannel() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'channel' field.
      * Associated major business channel of the producing domain.
      This is used to differentiate between full line, rack, haute look, trunk club - our major channels.
      The channel country attribute is used to further distinguish USA vs CAN channels.
      * @return This builder.
      */
    public com.nordstrom.event.rosettastone.Source.Builder clearChannel() {
      channel = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'platform' field.
      * Platform of the producing domain.
      This is used to understand which technical platform the event was sourced from.
      Examples would be point of sale versus iOS versus web.
      Events sourced from a web browser on an iOS or android device should use web.
      * @return The value.
      */
    public com.nordstrom.event.rosettastone.Platform getPlatform() {
      return platform;
    }


    /**
      * Sets the value of the 'platform' field.
      * Platform of the producing domain.
      This is used to understand which technical platform the event was sourced from.
      Examples would be point of sale versus iOS versus web.
      Events sourced from a web browser on an iOS or android device should use web.
      * @param value The value of 'platform'.
      * @return This builder.
      */
    public com.nordstrom.event.rosettastone.Source.Builder setPlatform(com.nordstrom.event.rosettastone.Platform value) {
      validate(fields()[2], value);
      this.platform = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'platform' field has been set.
      * Platform of the producing domain.
      This is used to understand which technical platform the event was sourced from.
      Examples would be point of sale versus iOS versus web.
      Events sourced from a web browser on an iOS or android device should use web.
      * @return True if the 'platform' field has been set, false otherwise.
      */
    public boolean hasPlatform() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'platform' field.
      * Platform of the producing domain.
      This is used to understand which technical platform the event was sourced from.
      Examples would be point of sale versus iOS versus web.
      Events sourced from a web browser on an iOS or android device should use web.
      * @return This builder.
      */
    public com.nordstrom.event.rosettastone.Source.Builder clearPlatform() {
      platform = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'feature' field.
      * (Optional) Specific feature associated with this event from the producing domain.
      As this is an open string, it is up to feature teams to manage and maintain data quality of these fields.
      Examples: PDP, Looks mini-PDP, recommendations, purchase history, etc...
      * @return The value.
      */
    public java.lang.CharSequence getFeature() {
      return feature;
    }


    /**
      * Sets the value of the 'feature' field.
      * (Optional) Specific feature associated with this event from the producing domain.
      As this is an open string, it is up to feature teams to manage and maintain data quality of these fields.
      Examples: PDP, Looks mini-PDP, recommendations, purchase history, etc...
      * @param value The value of 'feature'.
      * @return This builder.
      */
    public com.nordstrom.event.rosettastone.Source.Builder setFeature(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.feature = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'feature' field has been set.
      * (Optional) Specific feature associated with this event from the producing domain.
      As this is an open string, it is up to feature teams to manage and maintain data quality of these fields.
      Examples: PDP, Looks mini-PDP, recommendations, purchase history, etc...
      * @return True if the 'feature' field has been set, false otherwise.
      */
    public boolean hasFeature() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'feature' field.
      * (Optional) Specific feature associated with this event from the producing domain.
      As this is an open string, it is up to feature teams to manage and maintain data quality of these fields.
      Examples: PDP, Looks mini-PDP, recommendations, purchase history, etc...
      * @return This builder.
      */
    public com.nordstrom.event.rosettastone.Source.Builder clearFeature() {
      feature = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'serviceName' field.
      * (Optional) Name of the domain that produced the event.
      Most likely this would be paired with an events source with a platform value of backend service to distinguish the service or service team. (Optional)
      Examples: OMS: When OMS cancelled an order based on inventory shortage.
      Incorrect usage; DO NOT use when original decision or action came from a customer
      but the event was published by a backend service. Example, add to cart published by Checkout API.
      * @return The value.
      */
    public java.lang.CharSequence getServiceName() {
      return serviceName;
    }


    /**
      * Sets the value of the 'serviceName' field.
      * (Optional) Name of the domain that produced the event.
      Most likely this would be paired with an events source with a platform value of backend service to distinguish the service or service team. (Optional)
      Examples: OMS: When OMS cancelled an order based on inventory shortage.
      Incorrect usage; DO NOT use when original decision or action came from a customer
      but the event was published by a backend service. Example, add to cart published by Checkout API.
      * @param value The value of 'serviceName'.
      * @return This builder.
      */
    public com.nordstrom.event.rosettastone.Source.Builder setServiceName(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.serviceName = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'serviceName' field has been set.
      * (Optional) Name of the domain that produced the event.
      Most likely this would be paired with an events source with a platform value of backend service to distinguish the service or service team. (Optional)
      Examples: OMS: When OMS cancelled an order based on inventory shortage.
      Incorrect usage; DO NOT use when original decision or action came from a customer
      but the event was published by a backend service. Example, add to cart published by Checkout API.
      * @return True if the 'serviceName' field has been set, false otherwise.
      */
    public boolean hasServiceName() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'serviceName' field.
      * (Optional) Name of the domain that produced the event.
      Most likely this would be paired with an events source with a platform value of backend service to distinguish the service or service team. (Optional)
      Examples: OMS: When OMS cancelled an order based on inventory shortage.
      Incorrect usage; DO NOT use when original decision or action came from a customer
      but the event was published by a backend service. Example, add to cart published by Checkout API.
      * @return This builder.
      */
    public com.nordstrom.event.rosettastone.Source.Builder clearServiceName() {
      serviceName = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'store' field.
      * (Optional) Physical store number.
      MUST not be used for digital sales.
      Wherever possible we'd like to move away from overloading store number and call out the actual source of the event using channel, channel country, platform, feature, and service name.
      * @return The value.
      */
    public java.lang.CharSequence getStore() {
      return store;
    }


    /**
      * Sets the value of the 'store' field.
      * (Optional) Physical store number.
      MUST not be used for digital sales.
      Wherever possible we'd like to move away from overloading store number and call out the actual source of the event using channel, channel country, platform, feature, and service name.
      * @param value The value of 'store'.
      * @return This builder.
      */
    public com.nordstrom.event.rosettastone.Source.Builder setStore(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.store = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'store' field has been set.
      * (Optional) Physical store number.
      MUST not be used for digital sales.
      Wherever possible we'd like to move away from overloading store number and call out the actual source of the event using channel, channel country, platform, feature, and service name.
      * @return True if the 'store' field has been set, false otherwise.
      */
    public boolean hasStore() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'store' field.
      * (Optional) Physical store number.
      MUST not be used for digital sales.
      Wherever possible we'd like to move away from overloading store number and call out the actual source of the event using channel, channel country, platform, feature, and service name.
      * @return This builder.
      */
    public com.nordstrom.event.rosettastone.Source.Builder clearStore() {
      store = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'register' field.
      * (Optional) POS register number in a physical store.
      * @return The value.
      */
    public java.lang.CharSequence getRegister() {
      return register;
    }


    /**
      * Sets the value of the 'register' field.
      * (Optional) POS register number in a physical store.
      * @param value The value of 'register'.
      * @return This builder.
      */
    public com.nordstrom.event.rosettastone.Source.Builder setRegister(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.register = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'register' field has been set.
      * (Optional) POS register number in a physical store.
      * @return True if the 'register' field has been set, false otherwise.
      */
    public boolean hasRegister() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'register' field.
      * (Optional) POS register number in a physical store.
      * @return This builder.
      */
    public com.nordstrom.event.rosettastone.Source.Builder clearRegister() {
      register = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Source build() {
      try {
        Source record = new Source();
        record.channelCountry = fieldSetFlags()[0] ? this.channelCountry : (com.nordstrom.event.common.CountryCode) defaultValue(fields()[0]);
        record.channel = fieldSetFlags()[1] ? this.channel : (com.nordstrom.event.rosettastone.Channel) defaultValue(fields()[1]);
        record.platform = fieldSetFlags()[2] ? this.platform : (com.nordstrom.event.rosettastone.Platform) defaultValue(fields()[2]);
        record.feature = fieldSetFlags()[3] ? this.feature : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.serviceName = fieldSetFlags()[4] ? this.serviceName : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.store = fieldSetFlags()[5] ? this.store : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.register = fieldSetFlags()[6] ? this.register : (java.lang.CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Source>
    WRITER$ = (org.apache.avro.io.DatumWriter<Source>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Source>
    READER$ = (org.apache.avro.io.DatumReader<Source>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeEnum(this.channelCountry.ordinal());

    out.writeEnum(this.channel.ordinal());

    out.writeEnum(this.platform.ordinal());

    if (this.feature == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.feature);
    }

    if (this.serviceName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.serviceName);
    }

    if (this.store == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.store);
    }

    if (this.register == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.register);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.channelCountry = com.nordstrom.event.common.CountryCode.values()[in.readEnum()];

      this.channel = com.nordstrom.event.rosettastone.Channel.values()[in.readEnum()];

      this.platform = com.nordstrom.event.rosettastone.Platform.values()[in.readEnum()];

      if (in.readIndex() != 1) {
        in.readNull();
        this.feature = null;
      } else {
        this.feature = in.readString(this.feature instanceof Utf8 ? (Utf8)this.feature : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.serviceName = null;
      } else {
        this.serviceName = in.readString(this.serviceName instanceof Utf8 ? (Utf8)this.serviceName : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.store = null;
      } else {
        this.store = in.readString(this.store instanceof Utf8 ? (Utf8)this.store : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.register = null;
      } else {
        this.register = in.readString(this.register instanceof Utf8 ? (Utf8)this.register : null);
      }

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.channelCountry = com.nordstrom.event.common.CountryCode.values()[in.readEnum()];
          break;

        case 1:
          this.channel = com.nordstrom.event.rosettastone.Channel.values()[in.readEnum()];
          break;

        case 2:
          this.platform = com.nordstrom.event.rosettastone.Platform.values()[in.readEnum()];
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.feature = null;
          } else {
            this.feature = in.readString(this.feature instanceof Utf8 ? (Utf8)this.feature : null);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.serviceName = null;
          } else {
            this.serviceName = in.readString(this.serviceName instanceof Utf8 ? (Utf8)this.serviceName : null);
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.store = null;
          } else {
            this.store = in.readString(this.store instanceof Utf8 ? (Utf8)this.store : null);
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.register = null;
          } else {
            this.register = in.readString(this.register instanceof Utf8 ? (Utf8)this.register : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










